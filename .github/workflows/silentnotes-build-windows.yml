# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: SilentNotes Build for Windows

on: workflow_dispatch

jobs:
  build:
    runs-on: windows-latest

    env:
      Solution_Name: SilentNotes.sln
      Target_Framework: net7.0-windows10.0.19041.0

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Install MAUI
      run: dotnet workload install maui-windows --ignore-failed-sources

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    # - name: Restore the application
    #   run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
    #   env:
    #     Configuration: Release

    # Execute unit tests
    # - name: Execute unit tests (SilentNotes)
    #   run: dotnet test src\Tests\SilentNotesTest\SilentNotesTest.csproj
    # - name: Execute unit tests (VanillaCloudStorageClient)
    #   run: dotnet test src\Tests\VanillaCloudStorageClientTest\VanillaCloudStorageClientTest.csproj

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        echo "${{ secrets.SILENTNOTESPFX }}" > SilentNotes.pfx.asc
        certutil -decode SilentNotes.pfx.asc SilentNotes.pfx
    - name: Remove decoded pfx
      run: Remove-Item -path SilentNotes.pfx.asc
    - name: Add cert to store
      run: certutil -user -q -p ${{ secrets.SILENTNOTESPFXPASSWORD }} -importpfx SilentNotes.pfx NoRoot

    # Build application
    - name: Build application
      run: dotnet publish src\SilentNotes.Blazor\SilentNotes.csproj -c Release -f:${{ env.Target_Framework }} /p:GenerateAppxPackageOnBuild=true /p:AppxPackageSigningEnabled=true /p:PackageCertificateThumbprint="${{ secrets.SILENTNOTESPFXTHUMBPRINT }}"

    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path SilentNotes.pfx

    # Upload artifacts
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3.1.0
      with:
        path: .\**\AppPackages\**\*.*
