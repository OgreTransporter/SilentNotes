# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: testreadcsprojversion

on: workflow_dispatch

jobs:
  job_build:
    strategy:
      matrix:
        configuration: [Release]
  
    runs-on: windows-latest

    env:
      Solution_Name: SilentNotes.sln
      Project_Path: src\SilentNotes.Blazor\SilentNotes.csproj

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Read Csproj Version
      uses: bbonkr/get-version-action@v1
      id: get_version
      with:
        project: "${{ env.Project_Path }}"
        
    - name: logging
      run: |
        echo "version=${{ steps.get_version.outputs.version }}"
        echo "major=${{ steps.get_version.outputs.major }}"
        echo "minor=${{ steps.get_version.outputs.minor }}"
        echo "patch=${{ steps.get_version.outputs.patch }}"
        echo "pre-release=${{ steps.get_version.outputs.pre-release }}"
        echo "build=${{ steps.get_version.outputs.build }}"
