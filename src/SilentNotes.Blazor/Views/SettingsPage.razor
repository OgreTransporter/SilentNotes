@page "/settings"
@using System.ComponentModel
@using SilentNotes.Models
@using SilentNotes.ViewModels
@using SilentNotes.Services

@inject ISnackbar Snackbar
@inject ILanguageService LanguageService
@inject ISvgIconService IconService
@inject ISettingsService SettingsService
@inject IEnvironmentService EnvironmentService
@inject IThemeService ThemeService
@inject IFilePickerService FilePickerService

@implements IDisposable

@* Main menu *@
<MudAppBar Fixed="true" Class="" Dense="true">
    <MudIconButton Href="/back" Icon="@IconService[IconNames.ArrowLeft]" Color="Color.Inherit" Class="mr-5" Title="@LanguageService["back"]" />

    <MudSpacer />

    <MudMenu @ref="_overflowMenu" Dense="true" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
        <ActivatorContent>
            <MudIconButton Icon="@IconService[IconNames.DotsVertical]" Color="Color.Inherit" />
        </ActivatorContent>
        <ChildContent>
            <MudNavMenu Rounded="true" Margin="Margin.Dense" Class="px-1">
                <MudNavLink OnClick="@(() => ViewModel.TestNewLocalizationCommand.ExecuteAndCloseMenu(_overflowMenu))" Icon="@IconService[IconNames.Earth]">@LanguageService["gui_localization_test"]</MudNavLink>
            </MudNavMenu>
        </ChildContent>
    </MudMenu>
</MudAppBar>

@* watermark image *@
<MudIcon Class="background-icon" Icon="@IconService[IconNames.Settings]" Style="@($"right:-128px; top:-154px;")" />

@* body *@
<MudContainer id="content" Class="mud-container-left" MaxWidth="MaxWidth.Medium">
    <h1 class="h-colored">@LanguageService["gui_texture"]</h1>

    <MudSelect @bind-Value="ViewModel.SelectedThemeMode"
        Variant="Variant.Outlined">
        <MudSelectItem Value="@("Auto")">@LanguageService["gui_theme_auto"]</MudSelectItem>
        <MudSelectItem Value="@("Dark")">@LanguageService["gui_theme_dark"]</MudSelectItem>
        <MudSelectItem Value="@("Light")">@LanguageService["gui_theme_light"]</MudSelectItem>
    </MudSelect>

    <div class="form-row">
        <div class="form-group">
            <MudCheckBox @bind-Checked="@ViewModel.UseSolidColorTheme" id="UseSolidColorTheme" />
            <label for="UseSolidColorTheme" class="mr-2">@LanguageService["gui_theme_solid_color"]</label>
        </div>

        <div class="form-group">
            <MudElement Class="color-swatch ml-2 mr-0 align-self-end" Style="@ColorSwatchStyle"/>
            <MudColorPicker @bind-Text="@ViewModel.ColorForSolidThemeHex"
                Class="ml-0 mr-4 pa-0"
                Style="width:1px"
                DisableToolbar="true" DisableAlpha="true"
                ColorPickerView="ColorPickerView.Grid" ColorPickerMode="ColorPickerMode.HEX"
                AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" />
        </div>
    </div>


    <h1 class="h-colored">@LanguageService["gui"]</h1>

    <MudSlider @bind-Value="ViewModel.FontSizeStep"
                Min="-3" Max="3" Step="1"
                TickMarks="true">@LanguageService["gui_font_size"]</MudSlider>

    <MudSlider @bind-Value="ViewModel.NoteMaxHeightStep"
                Min="-4" Max="4" Step="1"
                TickMarks="true">@LanguageService["gui_note_max_size"]</MudSlider>
</MudContainer>

@code {
    private MudMenu _overflowMenu;

    protected override void OnInitialized()
    {
        SettingsModel settings = SettingsService.LoadSettingsOrDefault();
        ViewModel = new SettingsViewModel(settings, LanguageService, EnvironmentService, ThemeService, FilePickerService);
        ViewModel.PropertyChanged += PropertyChangedHandler;
    }

    public void Dispose()
    {
        ViewModel.PropertyChanged -= PropertyChangedHandler;
    }

    private SettingsViewModel ViewModel { get; set; }

    private string ColorSwatchStyle
    {
        get { return string.Format("background-color:{0}", ViewModel.ColorForSolidThemeHex); }
    }

    private void PropertyChangedHandler(object sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == "page")
            StateHasChanged();
    }
}
