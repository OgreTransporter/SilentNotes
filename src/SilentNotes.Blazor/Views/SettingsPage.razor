@page "/settings"
@using System.ComponentModel
@using SilentNotes.Models
@using SilentNotes.ViewModels
@using SilentNotes.Services

@inject ISnackbar Snackbar
@inject ILanguageService LanguageService
@inject ISvgIconService IconService
@inject ISettingsService SettingsService
@inject IEnvironmentService EnvironmentService
@inject IThemeService ThemeService
@inject IFeedbackService FeedbackService
@inject IFilePickerService FilePickerService
@inject ICloudStorageClientFactory CloudStorageClientFactory

@implements IDisposable

<style type="text/css">
    .css-grid {
        display: grid;
        margin-top: 14px;
        margin-bottom: 14px;
        grid-template-columns: 40px auto;
        align-items: center;
        grid-row-gap: 20px;
    }
</style>

@* Main menu *@
<MudAppBar Fixed="true" Class="" Dense="true">
    <MudIconButton Href="/back" Icon="@IconService[IconNames.ArrowLeft]" Color="Color.Inherit" Class="mr-5" Title="@LanguageService["back"]" />

    <MudSpacer />

    <MudMenu @ref="_overflowMenu" Dense="true" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
        <ActivatorContent>
            <MudIconButton Icon="@IconService[IconNames.DotsVertical]" Color="Color.Inherit" />
        </ActivatorContent>
        <ChildContent>
            <MudNavMenu Rounded="true" Margin="Margin.Dense" Class="px-1">
                <MudNavLink OnClick="@(() => ViewModel.TestNewLocalizationCommand.ExecuteAndCloseMenu(_overflowMenu))" Icon="@IconService[IconNames.Earth]">@LanguageService["gui_localization_test"]</MudNavLink>
            </MudNavMenu>
        </ChildContent>
    </MudMenu>
</MudAppBar>

@* watermark image *@
<MudIcon Class="background-icon" Icon="@IconService[IconNames.Settings]" Style="@($"right:-128px; top:-154px;")" />

@* body *@
<MudContainer id="content" Class="mud-container-left mud-container-p" MaxWidth="MaxWidth.Small">
    <h2 class="h-colored">@LanguageService["gui_texture"]</h2>

    <div class="css-grid">
        <div><MudIcon Icon="@Icons.Material.Filled.LightMode" Color="Color.Secondary" /></div>
        <div>
            <MudSelect @bind-Value="ViewModel.SelectedThemeMode">
                <MudSelectItem Value="@("Auto")">@LanguageService["gui_theme_auto"]</MudSelectItem>
                <MudSelectItem Value="@("Dark")">@LanguageService["gui_theme_dark"]</MudSelectItem>
                <MudSelectItem Value="@("Light")">@LanguageService["gui_theme_light"]</MudSelectItem>
            </MudSelect>
        </div>

        <div></div>
        <div>
            <MudStack Row="true" AlignItems="AlignItems.Baseline">
                <MudSwitch @bind-Checked="@ViewModel.UseSolidColorTheme" Color="Color.Tertiary" UnCheckedColor="Color.Tertiary" />

                <MudColorPicker @bind-Text="@ViewModel.ColorForSolidThemeHex"
                    DisableToolbar="true" DisableAlpha="true"
                    Label="@LanguageService["gui_theme_solid_color"]"
                    ColorPickerMode="ColorPickerMode.HEX"
                    AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" />

                <div class="color-swatch inline-flex" style="@GetBackgroundColorStyle(ViewModel.ColorForSolidThemeHex)">
                    <span class="@ViewModel.GetDarkClass(ViewModel.ColorForSolidThemeHex)">Lorem ipsum</span>
                </div>
            </MudStack>
        </div>

        <div></div>
        <div>
            <MudStack Row="true" AlignItems="AlignItems.Baseline">
                <MudColorPicker @bind-Text="ViewModel.DefaultNoteColorHex"
                    DisableToolbar="true" DisableAlpha="true"
                    ColorPickerView="ColorPickerView.Palette"
                    Label="@LanguageService["gui_default_color"]"
                    Palette="@ViewModel.NoteColorsHex.Select(color => new MudColor(color))"/>

                <div class="color-swatch inline-flex" style="@GetBackgroundColorStyle(ViewModel.DefaultNoteColorHex)">
                    <span class="@ViewModel.GetDarkClass(ViewModel.DefaultNoteColorHex)">Lorem ipsum</span>
                </div>
            </MudStack>
        </div>
    </div>


    <h2 class="h-colored mt-10">@LanguageService["gui"]</h2>

    <div class="css-grid">
        <div><MudIcon Icon="@Icons.Material.Filled.FormatSize" Color="Color.Secondary" /></div>
        <div>
            <MudSlider @bind-Value="ViewModel.FontSizeStep"
                Min="-3" Max="3" Step="1" Color="Color.Tertiary">@LanguageService["gui_font_size"]</MudSlider>
        </div>

        <div><MudIcon Icon="@Icons.Material.Filled.Expand" Color="Color.Secondary" /></div>
        <div>
            <MudSlider @bind-Value="ViewModel.NoteMaxHeightStep"
                Min="-4" Max="4" Step="1" Color="Color.Tertiary">@LanguageService["gui_note_max_size"]</MudSlider>
        </div>

        <div><MudIcon Icon="@Icons.Material.Filled.SwapVert" Color="Color.Secondary" /></div>
        <div>
            <MudSelect @bind-Value="ViewModel.SelectedNoteInsertionMode"
                Label="@LanguageService["gui_note_insertion"]">
                <MudSelectItem Value="@("AtTop")">@LanguageService["gui_note_insertion_top"]</MudSelectItem>
                <MudSelectItem Value="@("AtBottom")">@LanguageService["gui_note_insertion_bottom"]</MudSelectItem>
            </MudSelect>
        </div>

        <div></div>
        <div>
            <MudSwitch @bind-Checked="@ViewModel.RememberLastTagFilter"
                Label="@LanguageService["gui_remember_last_tag_filter"]" Color="Color.Tertiary" UnCheckedColor="Color.Tertiary" />
        </div>

        <div></div>
        <div>
            <MudSwitch @bind-Checked="@ViewModel.HideClosedSafeNotes"
                Label="@LanguageService["gui_hide_closed_safe_notes"]" Color="Color.Tertiary" UnCheckedColor="Color.Tertiary"/>
        </div>

        @if (ViewModel.CanKeepScreenOn)
        {
            <div><MudIcon Icon="@Icons.Material.Outlined.Timer" Color="Color.Secondary" /></div>
            <div>
                <MudSlider @bind-Value="ViewModel.KeepScreenOnDuration"
                    Min="1" Max="30" Step="1" Color="Color.Tertiary">@ViewModel.KeepScreenOnDurationTitle</MudSlider>
            </div>
        }
    </div>


    <h2 class="h-colored mt-10">@LanguageService["sync"]</h2>

    <div class="css-grid">
        <div><MudIcon Icon="@Icons.Material.Filled.Sync" Color="Color.Secondary" /></div>
        <div>
            <MudSelect @bind-Value="ViewModel.SelectedAutoSyncMode"
                Label="@LanguageService["sync_auto"]">
                <MudSelectItem Value="@("Never")">@LanguageService["sync_auto_never"]</MudSelectItem>
                <MudSelectItem Value="@("CostFreeInternetOnly")">@LanguageService["sync_auto_costfree"]</MudSelectItem>
                <MudSelectItem Value="@("Always")">@LanguageService["sync_auto_always"]</MudSelectItem>
            </MudSelect>
        </div>

        <div></div>
        <div>
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.caption">@LanguageService["cloud_service"]</MudText>
                <MudText>@ViewModel.AccountSummary</MudText>

                <MudStack Row="true" Justify="Justify.FlexEnd" Spacing="1" Class="mt-2">
                    <MudButton OnClick="@(() => ViewModel.ChangeCloudSettingsCommand.Execute(null))" Color="Color.Primary" Variant="Variant.Filled" title="@LanguageService["cloud_change_settings_desc"]">
                        @LanguageService["cloud_change_settings"]
                    </MudButton>
                    <MudButton OnClick="@(() => ViewModel.ClearCloudSettingsCommand.Execute(null))"
                        Color="Color.Error" Variant="Variant.Filled" Disabled="ViewModel.ClearCloudSettingsDisabled" title="@LanguageService["cloud_clear_settings_desc"]">
                        @LanguageService["cloud_clear_settings"]
                    </MudButton>
                </MudStack>
            </MudPaper>
        </div>
    </div>


    <h2 class="h-colored mt-10">@LanguageService["security"]</h2>

    <div class="css-grid">
        <div><MudIcon Icon="@Icons.Material.Outlined.Lock" Color="Color.Secondary" /></div>
        <div>
            <MudSelect @bind-Value="ViewModel.SelectedEncryptionAlgorithm"
                Label="@LanguageService["encryption_algorithm"]">
                @foreach (var algorithm in ViewModel.EncryptionAlgorithms)
                {
                    <MudSelectItem Value="@algorithm.Value">@algorithm.Description</MudSelectItem>
                }
            </MudSelect>
        </div>

        @if (ViewModel.CanPreventScreenshots)
        {
            <div></div>
            <div>
                <MudCheckBox @bind-Checked="@ViewModel.PreventScreenshots" Label="@LanguageService["security_prevent_screenshots"]" />
            </div>
        }
    </div>
</MudContainer>

@code {
    private MudMenu _overflowMenu;

    protected override void OnInitialized()
    {
        ViewModel = new SettingsViewModel(SettingsService, LanguageService, EnvironmentService, ThemeService, FeedbackService, CloudStorageClientFactory, FilePickerService);
        ViewModel.PropertyChanged += PropertyChangedHandler;
    }

    public void Dispose()
    {
        ViewModel.PropertyChanged -= PropertyChangedHandler;
    }

    private SettingsViewModel ViewModel { get; set; }

    private string GetBackgroundColorStyle(string backgroundColor)
    {
        return string.Format("background-color:{0}", backgroundColor);
    }

    private void PropertyChangedHandler(object sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == "page")
            StateHasChanged();
    }
}
