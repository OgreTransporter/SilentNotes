@page "/note/{NoteId}"
@page "/text/{NoteId}"
@using System.ComponentModel
@using MudBlazor.Utilities;
@using SilentNotes.Crypto;
@using SilentNotes.Models
@using SilentNotes.ViewModels
@using SilentNotes.Services
@using System.Runtime.InteropServices.JavaScript;

@inject IJSRuntime JSRuntime
@inject ILanguageService LanguageService
@inject ISvgIconService IconService
@inject IKeyboardShortcutService KeyboardShortcutService
@inject ISettingsService SettingsService
@inject IEnvironmentService EnvironmentService
@inject IThemeService ThemeService
@inject IFeedbackService FeedbackService
@inject IFilePickerService FilePickerService
@inject IRepositoryStorageService RepositoryStorageService
@inject ICloudStorageClientFactory CloudStorageClientFactory
@inject ICryptoRandomService CryptoRandomSource

@implements IDisposable
@implements IAsyncDisposable

<style type="text/css">
body {
	background-color: @ViewModel.BackgroundColorHex;
}
.note-viewer {
	font-size: @(ViewModel.GetNoteBaseFontSize(SettingsService, false))px !important;
}
</style>

@* Main menu *@
<MudAppBar Fixed="true" Class="" Dense="true">
	<MudIconButton @ref="_backButton" Href="/back" Icon="@IconService[IconNames.ArrowLeft]" Color="Color.Inherit" Class="mr-5" Title="@LanguageService["back"]" />

	<MudSpacer />

	<MudMenu @ref="_overflowMenu" Dense="true" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
		<ActivatorContent>
			<MudIconButton Icon="@IconService[IconNames.DotsVertical]" Color="Color.Inherit" />
		</ActivatorContent>
		<ChildContent>
			<MudNavMenu Rounded="true" Margin="Margin.Dense" Class="px-1">
				<MudNavLink Class="d-sm-none" Icon="@IconService.GetSvgLink(IconNames.NoteTextOutline)">@LanguageService["note_create_new"]</MudNavLink>
			</MudNavMenu>
		</ChildContent>
	</MudMenu>
</MudAppBar>

@* body *@
<div id="content" class="@ViewModel.LightOrDarkClass()">
	@if (ViewModel.IsLocked)
	{
		<span class="note-locked"><svg width='128' height='128' viewBox='0 0 24 24'><use xlink:href="#svg-lock-outline" /></svg></span>
	}
	else
	{
		<div @ref="_editorContainer" id="myeditor" v-pre class="note-viewer detail-view @ViewModel.CssClassNoteType"></div>
	}
</div>

@* Declare icons which can be reused multiple times, to reduce page size *@
<div hidden>
	@IconService.EmbedLinkableSvgs( new [] {
		IconNames.LockOutline,
	});
</div>

@code {
	private bool _isDisposed;
	private MudMenu _overflowMenu;
	private MudBaseButton _backButton;
	private ElementReference _editorContainer;
	private IKeyboardShortcuts _keyboardShortcuts;
	private IJSObjectReference _proseMirrorJs;
	private IJSObjectReference _jsModule;
	private IJSObjectReference _jsEditor;

	protected override void OnParametersSet()
	{
		RepositoryStorageLoadResult loadResult = RepositoryStorageService.LoadRepositoryOrDefault(out NoteRepositoryModel noteRepository);
		if (loadResult == RepositoryStorageLoadResult.InvalidRepository)
			throw new Exception("Invalid repository");

		// Get the note from the repository
		Guid noteId = new Guid(NoteId);
		NoteModel note = noteRepository.Notes.FindById(noteId);

		ICryptor cryptor = new Cryptor(NoteModel.CryptorPackageName, CryptoRandomSource);

		ViewModel = new NoteViewModel(note, null, LanguageService, ThemeService, SettingsService, cryptor, noteRepository.Safes);
		ViewModel.PropertyChanged += PropertyChangedHandler;

		_keyboardShortcuts = KeyboardShortcutService.CreateShortcuts()
			.Add(ModCode.None, Code.Escape, () => _backButton);
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			try
			{
				// Prepare prose mirror editor
				_jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Views/NotePage.razor.js");
				_jsEditor = await _jsModule.InvokeAsync<IJSObjectReference>("initialize", _editorContainer);
				string content = ViewModel.UnlockedHtmlContent;
				await _jsModule.InvokeVoidAsync("setNoteContent", _jsEditor, content);
			}
			catch (Exception ex)
			{
				string msg = ex.Message;
			}
		}
	}

	public void Dispose()
	{
		if (_isDisposed)
			return;
		_isDisposed = true;
		_keyboardShortcuts.Dispose();
		if (_jsModule != null)
			_jsModule.DisposeAsync();
		ViewModel.PropertyChanged -= PropertyChangedHandler;
	}

	async ValueTask IAsyncDisposable.DisposeAsync()
	{
		if (_proseMirrorJs != null)
			await _proseMirrorJs.DisposeAsync();
	}

	private NoteViewModel ViewModel { get; set; }

	[Parameter]
	public string NoteId { get; set; } = default!;

	private void PropertyChangedHandler(object sender, PropertyChangedEventArgs e)
	{
		if (e.PropertyName == "page")
			StateHasChanged();
	}
}
