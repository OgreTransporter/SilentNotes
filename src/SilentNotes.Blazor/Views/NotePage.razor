@page "/note/{NoteId}"
@using System.ComponentModel
@using MudBlazor.Utilities;
@using SilentNotes.Crypto;
@using SilentNotes.Models
@using SilentNotes.ViewModels
@using SilentNotes.Services
@using System.Runtime.InteropServices.JavaScript;

@inject IJSRuntime JSRuntime
@inject ILanguageService LanguageService
@inject ISvgIconService IconService
@inject INavigationService NavigationService
@inject IKeyboardShortcutService KeyboardShortcutService
@inject ISettingsService SettingsService
@inject IEnvironmentService EnvironmentService
@inject IThemeService ThemeService
@inject IFeedbackService FeedbackService
@inject IFilePickerService FilePickerService
@inject IRepositoryStorageService RepositoryStorageService
@inject ICloudStorageClientFactory CloudStorageClientFactory
@inject ICryptoRandomService CryptoRandomSource

@implements IAsyncDisposable

<style type="text/css">
body {
	background-color: @ViewModel.BackgroundColorHex;
}
.note-viewer {
	font-size: @(ViewModel.GetNoteBaseFontSize(SettingsService, false))px !important;
}
</style>

@* Main menu *@
<MudAppBar Fixed="true" Class="" Dense="true">
	<MudIconButton @ref="_backButton" Href="/back" Icon="@IconService[IconNames.ArrowLeft]" Color="Color.Inherit" Class="mr-5" Title="@LanguageService["back"]" Edge="Edge.Start" />

	<MudSpacer />

	<MudIconButton OnClick="@(() => ToggleFormatState("bold"))"
		Icon="@IconService.GetSvgLink(IconNames.FormatBold)" Color="Color.Inherit"
		Class="@Css.BuildClass(new CssClassIf(CssClasses.ButtonToggled, _formatStates.Bold))"
		Title="@LanguageService["note_bold"]" Disabled="ViewModel.ShoppingModeActive" Edge="Edge.End"/>

	<MudIconButton OnClick="@(() => ToggleFormatState("italic"))"
		Icon="@IconService.GetSvgLink(IconNames.FormatItalic)" Color="Color.Inherit"
		Class="@Css.BuildClass(new CssClassIf(CssClasses.ButtonToggled, _formatStates.Italic))"
		Title="@LanguageService["note_italic"]" Disabled="ViewModel.ShoppingModeActive" Edge="Edge.End"/>

	<MudIconButton OnClick="@(() => ToggleFormatState("underline"))"
		Icon="@IconService.GetSvgLink(IconNames.FormatUnderline)" Color="Color.Inherit"
		Class="@Css.BuildClass(new CssClassIf(CssClasses.ButtonToggled, _formatStates.Underline), "d-none d-sm-flex")"
		Title="@LanguageService["note_underline"]" Disabled="ViewModel.ShoppingModeActive" Edge="Edge.End"/>

	<MudIconButton OnClick="@(() => ToggleFormatState("strike"))"
		Icon="@IconService.GetSvgLink(IconNames.FormatStrikethrough)" Color="Color.Inherit"
		Class="@Css.BuildClass(new CssClassIf(CssClasses.ButtonToggled, _formatStates.Strike), "d-none d-sm-flex")"
		Title="@LanguageService["note_strike"]" Disabled="ViewModel.ShoppingModeActive" Edge="Edge.End" />

	<MudIconButton OnClick="@(() => ToggleFormatState("orderedlist"))"
		Icon="@IconService.GetSvgLink(IconNames.FormatListNumbers)" Color="Color.Inherit"
		Class="@Css.BuildClass(new CssClassIf(CssClasses.ButtonToggled, _formatStates.Orderedlist), "d-none d-sm-flex")"
		Title="@LanguageService["note_list_ordered"]" Disabled="ViewModel.ShoppingModeActive" Edge="Edge.End" />

	<MudIconButton OnClick="@(() => ToggleFormatState("bulletlist"))"
		Icon="@IconService.GetSvgLink(IconNames.FormatListBulleted)" Color="Color.Inherit"
		Class="@Css.BuildClass(new CssClassIf(CssClasses.ButtonToggled, _formatStates.Bulletlist), "d-none d-sm-flex")"
		Title="@LanguageService["note_list_unordered"]" Disabled="ViewModel.ShoppingModeActive" Edge="Edge.End" />

	@* Overflow menu *@
	<MudMenu @ref="_overflowMenu" Dense="true" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
		<ActivatorContent>
			<MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
		</ActivatorContent>
		<ChildContent>
			<MudMenuItem OnClick="@(() => ToggleFormatState("heading", 1))"
				Icon="@IconService.GetSvgLink(IconNames.FormatHeader1)"
				Class="@Css.BuildClass(new CssClassIf(CssClasses.MenuToggled, _formatStates.Heading1))"
				Disabled="ViewModel.ShoppingModeActive">@LanguageService["note_header1"]</MudMenuItem>

			<MudMenuItem OnClick="@(() => ToggleFormatState("heading", 2))"
				Icon="@IconService.GetSvgLink(IconNames.FormatHeader2)"
				Class="@Css.BuildClass(new CssClassIf(CssClasses.MenuToggled, _formatStates.Heading2))"
				Disabled="ViewModel.ShoppingModeActive">@LanguageService["note_header2"]</MudMenuItem>

			<MudMenuItem OnClick="@(() => ToggleFormatState("heading", 3))"
				Icon="@IconService.GetSvgLink(IconNames.FormatHeader3)"
				Class="@Css.BuildClass(new CssClassIf(CssClasses.MenuToggled, _formatStates.Heading3))"
				Disabled="ViewModel.ShoppingModeActive">@LanguageService["note_header3"]</MudMenuItem>

			<MudMenuItem OnClick="@(() => ToggleFormatState("underline"))"
				Icon="@IconService.GetSvgLink(IconNames.FormatUnderline)"
				Class="@Css.BuildClass(new CssClassIf(CssClasses.MenuToggled, _formatStates.Underline), "d-sm-none")"
				Disabled="ViewModel.ShoppingModeActive">@LanguageService["note_underline"]</MudMenuItem>

			<MudMenuItem OnClick="@(() => ToggleFormatState("strike"))"
				Icon="@IconService.GetSvgLink(IconNames.FormatStrikethrough)"
				Class="@Css.BuildClass(new CssClassIf(CssClasses.MenuToggled, _formatStates.Strike), "d-sm-none")"
				Disabled="ViewModel.ShoppingModeActive">@LanguageService["note_strike"]</MudMenuItem>

			<MudMenuItem OnClick="@(() => ToggleFormatState("orderedlist"))"
				Icon="@IconService.GetSvgLink(IconNames.FormatListNumbers)"
				Class="@Css.BuildClass(new CssClassIf(CssClasses.MenuToggled, _formatStates.Orderedlist), "d-sm-none")"
				Disabled="ViewModel.ShoppingModeActive">@LanguageService["note_list_ordered"]</MudMenuItem>

			<MudMenuItem OnClick="@(() => ToggleFormatState("bulletlist"))"
				Icon="@IconService.GetSvgLink(IconNames.FormatListBulleted)"
				Class="@Css.BuildClass(new CssClassIf(CssClasses.MenuToggled, _formatStates.Bulletlist), "d-sm-none")"
				Disabled="ViewModel.ShoppingModeActive">@LanguageService["note_list_unordered"]</MudMenuItem>

			<MudDivider/>

			<MudMenuItem OnClick="@(() => ViewModel.TogglePinnedCommand.Execute(null))"
				Icon="@IconService.GetSvgLink(IconNames.Pin)"
				Class="@Css.BuildClass(new CssClassIf(CssClasses.MenuToggled, ViewModel.IsPinned))"
				Disabled="ViewModel.ShoppingModeActive">@LanguageService["note_pin"]</MudMenuItem>
		</ChildContent>
	</MudMenu>
</MudAppBar>

@* body *@
<div id="content" class="@ViewModel.LightOrDarkClass()">
	@if (ViewModel.IsLocked)
	{
		<span class="note-locked"><svg width='128' height='128' viewBox='0 0 24 24'><use xlink:href="#svg-lock-outline" /></svg></span>
	}
	else
	{
		<div @ref="_editorContainer" id="myeditor" v-pre class="note-viewer detail-view @ViewModel.CssClassNoteType"></div>
	}
</div>

@* Declare icons which can be reused multiple times, to reduce page size *@
<div hidden>
	@IconService.EmbedLinkableSvgs( new [] {
		IconNames.FormatBold,
		IconNames.FormatItalic,
		IconNames.FormatHeader1,
		IconNames.FormatHeader2,
		IconNames.FormatHeader3,
		IconNames.FormatUnderline,
		IconNames.FormatStrikethrough,
		IconNames.FormatListNumbers,
		IconNames.FormatListBulleted,
		IconNames.Pin,
	});
</div>

@code {
	private bool _isDisposed;
	private MudMenu _overflowMenu;
	private MudBaseButton _backButton;
	private ElementReference _editorContainer;
	private IKeyboardShortcuts _keyboardShortcuts;
	private IJSObjectReference _jsModule;
	private DotNetObjectReference<NotePage> _dotnetModule;
	private FormatToggleStates _formatStates;

	/// <summary>
	/// Initializes a new instance of the <see cref="NotePage"/> class.
	/// </summary>
	public NotePage()
	{
		_formatStates = new FormatToggleStates();
	}

	protected override void OnParametersSet()
	{
		RepositoryStorageLoadResult loadResult = RepositoryStorageService.LoadRepositoryOrDefault(out NoteRepositoryModel noteRepository);
		if (loadResult == RepositoryStorageLoadResult.InvalidRepository)
			throw new Exception("Invalid repository");

		// Get the note from the repository
		Guid noteId = new Guid(NoteId);
		NoteModel note = noteRepository.Notes.FindById(noteId);
		ICryptor cryptor = new Cryptor(NoteModel.CryptorPackageName, CryptoRandomSource);
		ViewModel = new NoteViewModel(note, null, LanguageService, ThemeService, SettingsService, cryptor, noteRepository.Safes);

		// Redirect to open safe if locked
		if (ViewModel.IsLocked)
		{
			NavigationService.NavigateTo(ViewModel.Route, false, true);
			return;
		}

		ViewModel.PropertyChanged += PropertyChangedHandler;

		_keyboardShortcuts = KeyboardShortcutService.CreateShortcuts()
			.Add(ModCode.None, Code.Escape, () => _backButton);
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			try
			{
				_dotnetModule = DotNetObjectReference.Create(this);

				// Prepare prose mirror editor
				_jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Views/NotePage.razor.js");
				await _jsModule.InvokeVoidAsync("initialize", _dotnetModule, _editorContainer);
				string content = ViewModel.UnlockedHtmlContent;
				await _jsModule.InvokeVoidAsync("setNoteContent", content);
			}
			catch (Exception ex)
			{
				string msg = ex.Message;
			}
		}
	}

	async ValueTask IAsyncDisposable.DisposeAsync()
	{
		if (_isDisposed)
			return;
		_isDisposed = true;

		if (ViewModel != null)
			ViewModel.PropertyChanged -= PropertyChangedHandler;
		_dotnetModule?.Dispose();
		_keyboardShortcuts?.Dispose();
		if (_jsModule != null)
			await _jsModule.DisposeAsync();
	}

	private NoteViewModel ViewModel { get; set; }

	[Parameter]
	public string NoteId { get; set; } = default!;

	private async Task ToggleFormatState(string formatName, int formatParameter = 0)
	{
		await _jsModule.InvokeVoidAsync("toggleFormatAndRefresh", formatName, formatParameter);
	}

	[JSInvokable("RefreshActiveFormatState")]
	public void RefreshActiveFormatState(bool[] states)
	{
		_formatStates.LoadFromJsArray(states);
		StateHasChanged();
	}

	private void PropertyChangedHandler(object sender, PropertyChangedEventArgs e)
	{
		if (e.PropertyName == "page")
			StateHasChanged();
	}
}
