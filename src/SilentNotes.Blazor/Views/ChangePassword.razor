@page "/changepassword"
@using System.ComponentModel;
@using System.Security
@using SilentNotes.Models
@using SilentNotes.ViewModels
@using SilentNotes.Views
@using SilentNotes.Services

@inject ILanguageService LanguageService
@inject ISvgIconService IconService
@inject ISettingsService SettingsService
@inject IFeedbackService FeedbackService
@inject ICryptoRandomService RandomService
@inject IRepositoryStorageService RepositoryService
@inject INavigationService NavigationService

<style type="text/css">
</style>

@* Main menu *@
<MudAppBar Fixed="true" Dense="true">
    <MudIconButton Href="/back" Icon="@IconService[IconNames.ArrowLeft]" Color="Color.Inherit" Class="mr-5" Title="@LanguageService["back"]" />
</MudAppBar>

@* watermark image *@
<MudIcon Class="background-icon" Icon="@IconService[IconNames.SafeSquareOutline]" Style="@($"right:-110px; top:-160px;")" />

@* body *@
<MudContainer id="content" Class="mud-container-left" MaxWidth="MaxWidth.Medium">
    <h1 class="h-colored mb-6">@LanguageService["safe_change_password"]</h1>

    <MudForm>
        <MudTextFieldEx T="SecureString" @bind-Value="ViewModel.OldPassword"
            Label="@LanguageService["safe_old_password"]"
            Converter="@_secureStringConverter"
            Variant="Variant.Outlined" InputType="@PasswordInputType"
            Error="@ViewModel.HasOldPasswordError"
            ErrorText="@LanguageService["password_wrong_error"]"
            Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="@(() => IsPasswordVisible = !IsPasswordVisible)" />

        <MudTextFieldEx T="SecureString" @bind-Value="ViewModel.Password"
            Label="@LanguageService["cloud_password"]"
            Converter="@_secureStringConverter"
            Variant="Variant.Outlined" InputType="@PasswordInputType"
            Error="@ViewModel.HasPasswordError"
            ErrorText="@LanguageService["password_short_error"]"
            Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="@(() => IsPasswordVisible = !IsPasswordVisible)" />

        <MudTextFieldEx @bind-Value="ViewModel.PasswordConfirmation"
            Label="@LanguageService["safe_confirm_password"]"
            Converter="@_secureStringConverter"
            Variant="Variant.Outlined" InputType="@PasswordInputType"
            Error="@ViewModel.HasPasswordConfirmationError"
            ErrorText="@LanguageService["password_confirmation_error"]" />
    </MudForm>

    <MudPaper Class="d-flex justify-end gap-2 my-4" Elevation="0">
        <MudButton Color="Color.Default" Variant="Variant.Text" Href="/back">@LanguageService["cancel"]</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(()=>ViewModel.OkCommand.Execute(null))">@LanguageService["ok"]</MudButton>
    </MudPaper>

    <MudAlert Class="d-inline-flex my-4" Severity="Severity.Info" Elevation="1">@LanguageService["safe_password_requirement"]</MudAlert>
</MudContainer>

@* Declare icons which can be reused multiple times, to reduce page size *@
<div hidden>
    @IconService.EmbedLinkableSvgs( new [] {
    IconNames.SafeSquareOutline,
    });
</div>

@code {
    private MudMenu _overflowMenu;
    private SecureStringConverter _secureStringConverter;

    protected override void OnInitialized()
    {
        base.OnParametersSet();
        IsPasswordVisible = false;
        ViewModel = new ChangePasswordViewModel(NavigationService, RandomService, SettingsService, RepositoryService);
        _secureStringConverter = new SecureStringConverter();
    }

    private ChangePasswordViewModel ViewModel { get; set; }

    /// <summary>
    /// Gets or sets a value indicating whether the plaintext of the password is shown.
    /// </summary>
    private bool IsPasswordVisible { get; set; }

    /// <summary>
    /// Gets the type for the password input field (dots/plaintext).
    /// </summary>
    private InputType PasswordInputType
    {
        get { return IsPasswordVisible ? InputType.Text : InputType.Password; }
    }

    /// <summary>
    /// Gets the "password visible" icon for the password input field.
    /// </summary>
    private string PasswordInputIcon
    {
        get { return IsPasswordVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff; }
    }
}