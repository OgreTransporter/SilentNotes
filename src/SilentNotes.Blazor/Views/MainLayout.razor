@inherits LayoutComponentBase

@using SilentNotes.Services

@inject IThemeService ThemeService
@inject INavigationService NavigationService
@inject IBrowserHistoryService BrowserHistoryService
@inject IFeedbackService FeedbackService

<MudThemeProvider @bind-IsDarkMode="ThemeService.IsDarkMode" Theme="@ThemeService.Theme" />
<MudDialogProvider DisableBackdropClick="true" CloseOnEscapeKey="true"/>
<MudSnackbarProvider />

<MudLayout Class="@ThemeService.LightOrDarkClass">
	<MudMainContent Class="d-flex flex-column" Style="height:100%; margin:0; padding:0;">
		@Body
	</MudMainContent>
</MudLayout>

@code {
	protected override void OnInitialized()
	{
		// Give the theme service a way to redraw the GUI of the whole app.
		ThemeService.Initialize(StateHasChanged);

		// initialize the browser history
		BrowserHistoryService.UpdateHistoryOnNavigation(Routes.NoteRepository, string.Empty);

		// Workaround: Scoped services are always correct when injected, but when adding them to
		// Ioc as scoped services, it seems they get lost, and when demanded the next time the Ioc
		// creates a new different service. Therefore we register them as we got them from injection.
		Ioc.Instance
			.ClearInjected()
			.AddInjected<INavigationService>(NavigationService)
			.AddInjected<IFeedbackService>(FeedbackService);
	}
}
