@page "/"
@inherits PageBase

@using System.ComponentModel
@using System.Windows.Input;
@using MudBlazor.Services;
@using SilentNotes.Models
@using SilentNotes.ViewModels
@using SilentNotes.Services

@inject ILanguageService LanguageService
@inject ISvgIconService IconService
@inject IJSRuntime JSRuntime
@inject INavigationService Navigation
@inject IFeedbackService FeedbackService
@inject ISettingsService SettingsService
@inject IThemeService ThemeService
@inject IRepositoryStorageService RepositoryStorageService
@inject IEnvironmentService EnvironmentService
@inject ICryptoRandomService CryptoRandomSource
@inject IScrollManager ScrollManager
@inject IBrowserViewportService ViewportService

<style type="text/css">
	#content {
		@(ThemeService.CssNoteRepositoryBackground)
		background-attachment: fixed;
	}
	.note-item, .note-card, .note-locked {
		min-height: @(ViewModel.NoteMinHeight)px;
		max-height: @(ViewModel.NoteMaxHeight)px;
	}
	.note-viewer {
		font-size: @(ViewModel.GetNoteBaseFontSize(SettingsService, true))px !important;
	}
	.note-light .note-viewer.over-view.checklist p::before { content: @(IconService.LoadIconAsCssUrl(IconNames.CheckboxBlankOutline, new[] { new KeyValuePair<string, string>("fill", "#000000") })) }
	.note-light .note-viewer.over-view.checklist p.done::before { content: @(IconService.LoadIconAsCssUrl(IconNames.CheckboxOutline, new[] { new KeyValuePair<string, string>("fill", "#000000") })) }
	.note-light .note-viewer.over-view.checklist p.disabled::before { content: @(IconService.LoadIconAsCssUrl(IconNames.CheckboxBlankOutline, new[] { new KeyValuePair<string, string>("fill", "#000000") })) }
	.note-dark .note-viewer.over-view.checklist p::before { content: @(IconService.LoadIconAsCssUrl(IconNames.CheckboxBlankOutline, new[] { new KeyValuePair<string, string>("fill", "#FFFFFF") })) }
	.note-dark .note-viewer.over-view.checklist p.done::before { content: @(IconService.LoadIconAsCssUrl(IconNames.CheckboxOutline, new[] { new KeyValuePair<string, string>("fill", "#FFFFFF") })) }
	.note-dark .note-viewer.over-view.checklist p.disabled::before { content: @(IconService.LoadIconAsCssUrl(IconNames.CheckboxBlankOutline, new[] { new KeyValuePair<string, string>("fill", "#FFFFFF") })) }
</style>

@* Main menu *@
<MudAppBar Class="flex-none" Fixed="false" Dense="true" WrapContent="false">
	<MudSpacer />

	@* Tags *@
	<MudIconButton @ref="_tagsButton" OnClick="@(() => ViewModel.IsDrawerOpen = !ViewModel.IsDrawerOpen)"
		Class="@Css.BuildClass(new CssClassIf(CssClasses.ButtonToggled, ViewModel.IsFilteredByTag))"
		Icon="@(IconService.GetSvgLink(IconNames.TagMultiple))" Color="Color.Inherit"
		Title="@(((ListItemViewModel<string>)ViewModel.SelectedTag).Text)" />

	@* Filter *@
	<MudPaper Class="d-inline-flex align-center rounded-pill pa-0" MaxWidth="55%" MaxHeight="36px" Elevation="0">
		<MudInput @ref="_filterInput" @bind-Value="ViewModel.Filter"
			Class="filter-input ml-2 mr-1 my-0"
			AutoFocus="@ShouldAutofocusToFilter"
			Adornment="@(ViewModel.IsFiltered ? Adornment.None : Adornment.End)" AdornmentIcon="@IconService.GetSvgLink(IconNames.Magnify)"
			Immediate="true" Clearable="true" />
	</MudPaper>

	@* Synchronization *@
	<MudIconButton @ref="_syncButton" Icon="@IconService[IconNames.CloudSync]" Color="Color.Inherit" Title="@LanguageService["sync_notes"]" Edge="Edge.End" />

	@* Overflow menu *@
	<MudMenu @ref="_overflowMenu" Dense="true" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
		<ActivatorContent>
			<MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
		</ActivatorContent>
		<ChildContent>
			<MudMenuItem OnClick="@(() => ViewModel.NewNoteCommand.Execute(null))" Icon="@IconService.GetSvgLink(IconNames.NoteTextOutline)">@LanguageService["note_create_new"]</MudMenuItem>
			<MudMenuItem OnClick="@(() => ViewModel.NewChecklistCommand.Execute(null))" Icon="@IconService.GetSvgLink(IconNames.OrderBoolAscendingVariant)">@LanguageService["checklist_create_new"]</MudMenuItem>
			<MudMenuItem OnClick="@(() => Navigation.NavigateTo("/recyclebin"))" Icon="@IconService[IconNames.DeleteEmpty]">@LanguageService["show_recyclebin"]</MudMenuItem>
			<MudMenuItem OnClick="@(() => Navigation.NavigateTo("/export"))" Icon="@IconService[IconNames.Export]">@LanguageService["show_export"]</MudMenuItem>

			<MudDivider />

			@if (ViewModel.IsAnySafeOpen)
			{
				<MudMenuItem OnClick="@(() => ViewModel.CloseSafeCommand.Execute(null))" Icon="@IconService.GetSvgLink(IconNames.SafeSquareOutline)">@LanguageService["safe_close"]</MudMenuItem>
			}
			else
			{
				<MudMenuItem OnClick="@(() => Navigation.NavigateTo("/opensafe"))" Icon="@IconService.GetSvgLink(IconNames.SafeSquareOutline)">@LanguageService["safe_open"]</MudMenuItem>
			}
			<MudMenuItem OnClick="@(() => Navigation.NavigateTo("/changepassword"))" Icon="@IconService[IconNames.LockReset]" Disabled="!ViewModel.SafeExists">@LanguageService["safe_change_password"]</MudMenuItem>

			<MudDivider />

			<MudMenuItem OnClick="@(() => Navigation.NavigateTo("/transfercodehistory"))" Icon="@IconService[IconNames.Key]">@LanguageService["show_transfer_code"]</MudMenuItem>
			<MudMenuItem OnClick="@(() => Navigation.NavigateTo("/settings"))" Icon="@IconService[IconNames.Settings]">@LanguageService["show_settings"]</MudMenuItem>
			<MudMenuItem OnClick="@(() => Navigation.NavigateTo("/info"))" ForceLoad="false" Icon="@Icons.Material.Filled.Info">@LanguageService["show_info"]</MudMenuItem>
		</ChildContent>
	</MudMenu>
</MudAppBar>

@* Sidebar with tags *@
<MudDrawer @ref="_sideDrawer" @bind-Open="@ViewModel.IsDrawerOpen" Elevation="1" Variant="@DrawerVariant.Responsive" Breakpoint="Breakpoint.Md" ClipMode="DrawerClipMode.Docked" Style="top:0; height:100%">
	<MudDrawerHeader Class="d-inline-flex justify-space-between align-start">
		<h2>Filter by tag</h2>
		<MudIconButton OnClick="() => ViewModel.IsDrawerOpen = false" Icon="@IconService.GetSvgLink(IconNames.Close)" Size="Size.Small" />
	</MudDrawerHeader>
	<MudDrawerContainer>
		<MudList Clickable="true" @bind-SelectedValue="@ViewModel.SelectedTag" Dense="false">
			@foreach (var tag in ViewModel.Tags)
			{
				if (tag.IsDivider)
				{
					<MudDivider />
				}
				else
				{
					<MudListItem Value="@tag" Text="@tag.Text" Icon="@IconService.GetSvgLink(tag.IconName)" OnClick="() => CloseDrawerWhenItemSelected()" />
				}
			}
		</MudList>
	</MudDrawerContainer>
</MudDrawer>

@* body *@
<div id="content" class="flex-1 px-1 py-2">
	<ul id="note-repository" class="note-list flex-column flex-sm-row">
		@foreach (var note in ViewModel.FilteredNotes)
		{
			<li @key="note.Id" class="note-item" data-note="@note.Id">
				<a href="@note.Route">
					<div class="note-card mud-elevation-3 @note.LightOrDarkClass()" style="background-color:@note.BackgroundColorHex">
						@if (note.IsLocked)
						{
							<div class="note-locked">@IconService.EmbedSvgLink(IconNames.LockOutline)</div>
						}
						else
						{
							@* prevent drag start with onmousedown:preventDefault *@
							<div class="note-viewer over-view @note.CssClassNoteType" @onmousedown:preventDefault="true">@((MarkupString)note.GetShortenedUnlockedHtmlContent())</div>
						}

						@if (note.IsPinned)
						{
							<div class="pin">@IconService.EmbedSvgLink(IconNames.Pin, 22)</div>
						}
						<div class="note-handle sortable-handle @Css.BuildClass(new CssClassIf("bluish-highlighted", note == ViewModel.SelectedOrderNote))" @onmousedown="() => ViewModel.SelectOrderNote(note)" @onmousedown:preventDefault="true" @onclick:preventDefault="true">@IconService.EmbedSvgLink(IconNames.ArrowAll, 22)</div>
						<div class="note-handle recycle-handle" @onclick="() => ViewModel.DeleteNoteCommand.Execute(note.Id)" @onclick:preventDefault="true">@IconService.EmbedSvgLink(IconNames.Delete, 19)</div>
						@if (ViewModel.IsAnySafeOpen && !note.IsLocked)
						{
							@if (note.IsInSafe)
							{
								<div class="note-handle safe-handle reddish" @onclick="() => ViewModel.RemoveNoteFromSafe(note.Id)" @onclick:preventDefault="true">@IconService.EmbedSvgLink(IconNames.Lock, 18)</div>
							}
							else
							{
								<div class="note-handle safe-handle greenish" @onclick="() => ViewModel.AddNoteToSafe(note.Id)" @onclick:preventDefault="true">@IconService.EmbedSvgLink(IconNames.LockOpenVariant, 18)</div>
							}
						}
					</div>
				</a>
			</li>
		}
	</ul>
</div>

@* Note ordering toolbar *@
<MudPopover Open="@ViewModel.OrderToolbarVisible" Class="secondary-app-bar" AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.TopRight">
	<MudIconButton OnClick="() => ViewModel.MoveSelectedOrderNote(true, false)" Icon="@IconService[IconNames.ArrowCollapseUp]" Color="Color.Inherit" Title="order" Edge="Edge.End" />
	<MudIconButton OnClick="() => ViewModel.MoveSelectedOrderNote(true, true)" Icon="@IconService[IconNames.ArrowUp]" Color="Color.Inherit" Title="order" Edge="Edge.End" />
	<MudIconButton OnClick="() => ViewModel.MoveSelectedOrderNote(false, true)" Icon="@IconService[IconNames.ArrowDown]" Color="Color.Inherit" Title="order" Edge="Edge.End" />
	<MudIconButton OnClick="() => ViewModel.MoveSelectedOrderNote(false, false)" Icon="@IconService[IconNames.ArrowCollapseDown]" Color="Color.Inherit" Title="order" Edge="Edge.False" />
	<MudIconButton OnClick="() => ViewModel.SelectOrderNote(null)" Icon="@IconService.GetSvgLink(IconNames.Close)" Color="Color.Inherit" Size="Size.Small" Edge="Edge.End" />
</MudPopover>

@* The FAB for adding a new note *@
<MudMenu Class="fab-position" AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.BottomRight">
	<ActivatorContent>
		<MudFab Class="mt-4" Color="Color.Primary" StartIcon="@IconService[IconNames.Plus]" />
	</ActivatorContent>
	<ChildContent>
		<MudNavLink OnClick="() => ViewModel.NewNoteCommand.Execute(null)" Icon="@IconService.GetSvgLink(IconNames.NoteTextOutline)">@LanguageService["note_create_new"]</MudNavLink>
		<MudNavLink OnClick="() => ViewModel.NewChecklistCommand.Execute(null)" Icon="@IconService.GetSvgLink(IconNames.OrderBoolAscendingVariant)">@LanguageService["checklist_create_new"]</MudNavLink>
	</ChildContent>
</MudMenu>

@* Declare icons which can be reused multiple times, to reduce page size *@
<div hidden>
	@IconService.EmbedLinkableSvgs( new [] {
		IconNames.ArrowAll,
		IconNames.Close,
		IconNames.Delete,
		IconNames.LockOutline,
		IconNames.Lock,
		IconNames.LockOpenVariant,
		IconNames.Magnify,
		IconNames.NoteTextOutline,
		IconNames.OrderBoolAscendingVariant,
		IconNames.Pin,
		IconNames.TagMultiple,
		IconNames.TagOff,
		IconNames.TagOutline,
		IconNames.SafeSquareOutline,
		IconNames.ArrowCollapseUp,
		IconNames.ArrowUp,
		IconNames.ArrowDown,
		IconNames.ArrowCollapseDown,
	});
</div>


@code {
	///////////////////////////////////////////////////////////////////////////////////////////////
	private MudInput<string> _filterInput;
	private MudMenu _overflowMenu;
	private MudDrawer _sideDrawer;
	private MudIconButton _tagsButton;
	private MudBaseButton _syncButton;
	private string _pendingScrollIntoViewSelector;

	/// <summary>
	/// Initializes a new instance of the <see cref="NoteRepositoryPage"/> class.
	/// </summary>
	protected override void OnInitialized()
	{
		RepositoryStorageLoadResult loadResult = RepositoryStorageService.LoadRepositoryOrDefault(out NoteRepositoryModel noteRepositoryModel);
		if (loadResult == RepositoryStorageLoadResult.InvalidRepository)
			throw new Exception("Invalid repository");

		ViewModel = new NoteRepositoryViewModel(
			noteRepositoryModel,
			LanguageService,
			Navigation,
			FeedbackService,
			ThemeService,
			SettingsService,
			EnvironmentService,
			CryptoRandomSource,
			RepositoryStorageService
		);
		ViewModel.PropertyChanged += PropertyChangedHandler;

		// todo: read the SettingsViewMode.StartWithTagsOpen
		base.OnInitialized();
	}

	/// <inheritdoc/>
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await KeyboardShortcuts.InitializeAsync(JSRuntime);
			KeyboardShortcuts
				.AddShortcut(new SnKeyboardShortcut("t", true), async () => await SnKeyboardShortcuts.SimulateClickAsync(_tagsButton))
				.AddShortcut(new SnKeyboardShortcut("s", true), async () => await SnKeyboardShortcuts.SimulateClickAsync(_syncButton))
				.AddShortcut(new SnKeyboardShortcut("n", true), () => ViewModel.NewNoteCommand.Execute(null))
				.AddShortcut(new SnKeyboardShortcut("l", true), () => ViewModel.NewChecklistCommand.Execute(null))
				.AddShortcut(new SnKeyboardShortcut("r", true), () => Navigation.NavigateTo("/recyclebin"))
				.AddShortcut(new SnKeyboardShortcut("i", true), () => Navigation.NavigateTo("/info"))
				.AddShortcut(new SnKeyboardShortcut(SnKey.Home), async () => await ScrollManager.ScrollToTopAsync("#content", ScrollBehavior.Auto))
				.AddShortcut(new SnKeyboardShortcut(SnKey.End), async () => await ScrollManager.ScrollToBottomAsync("#content", ScrollBehavior.Auto));
		}

		if (!string.IsNullOrEmpty(_pendingScrollIntoViewSelector))
		{
			await ScrollManager.ScrollIntoViewAsync(_pendingScrollIntoViewSelector, ScrollBehavior.Smooth);
			_pendingScrollIntoViewSelector = null;
		}
	}

	/// <inheritdoc/>
	protected override void OnStoringUnsavedData()
	{
		base.OnStoringUnsavedData();
		ViewModel?.OnStoringUnsavedData();
	}

	/// <inheritdoc/>
	protected override void OnClosingPage()
	{
		base.OnClosingPage();
		if (ViewModel != null)
			ViewModel.PropertyChanged -= PropertyChangedHandler;
	}

	/// <summary>
	/// Gets or sets the datacontext of this view.
	/// </summary>
	private NoteRepositoryViewModel ViewModel { get; set; }

	/// <summary>
	/// Focus filter control for direct typing on Windows.
	/// On Android the focus will bring up the keyboard, which we want to avoid.
	/// </summary>
	private bool ShouldAutofocusToFilter
	{
		get { return EnvironmentService.Os == Services.OperatingSystem.Windows; }
	}

	private void PropertyChangedHandler(object sender, PropertyChangedEventArgs e)
	{
		if (e.PropertyName == "SelectedOrderNotePosition")
		{
			// Remember to scroll to the moved note, as soon as the rendering has finished.
			_pendingScrollIntoViewSelector = string.Format("[data-note='{0}']", ViewModel.SelectedOrderNote.Id);
		}
	}

	/// <summary>
	/// Workaround, because the drawer contains a MudList which consumes the click event and does
	/// not automatically close the drawer for small screens.
	/// </summary>
	/// <returns>Task for async calls.</returns>
	private async Task CloseDrawerWhenItemSelected()
	{
		bool isLargeScreen = await ViewportService.IsBreakpointWithinWindowSizeAsync(Breakpoint.MdAndUp);
		if (!isLargeScreen)
			ViewModel.IsDrawerOpen = false;
	}
}
