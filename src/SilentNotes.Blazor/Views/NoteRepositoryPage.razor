@page "/"
@using SilentNotes.Services

@inject ISnackbar Snackbar
@inject ILanguageService LanguageService
@inject ISvgIconService IconService

@implements IDisposable

<MudAppBar Fixed="true" Class="" Dense="true">
    <MudSpacer />

    <MudPaper Class="d-inline-flex align-center rounded-pill pa-0" MaxHeight="36px" Elevation="0">
        <MudInput @ref="FilterInput" @bind-Value="Filter"
            Class="filter-input ml-2 mr-1 my-0"
            Adornment="Adornment.End" AdornmentIcon="@FilterIcon" OnAdornmentClick="ClearFilter"
            Immediate="true" />
    </MudPaper>

    <MudIconButton Class="d-none d-sm-flex" Icon="@IconService[IconNames.CloudSync]" Color="Color.Inherit" />

    <MudMenu @ref="OverflowMenu"
        Dense="true"
        AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">

        <ActivatorContent>
            <MudIconButton Icon="@IconService[IconNames.DotsVertical]" Color="Color.Inherit" />
        </ActivatorContent>
        <ChildContent>
            <MudNavMenu Rounded="true" Margin="Margin.Dense" Class="px-1">
                <MudNavLink Class="d-sm-none" OnClick="DoClick" Icon="@IconService[IconNames.NoteTextOutline]">@LanguageService["note_create_new"]</MudNavLink>
                <MudNavLink OnClick="DoClick" Icon="@IconService[IconNames.OrderBoolAscendingVariant]">@LanguageService["checklist_create_new"]</MudNavLink>
                <MudNavLink OnClick="DoClick" Icon="@IconService[IconNames.DeleteEmpty]">@LanguageService["show_recyclebin"]</MudNavLink>
                <MudNavLink OnClick="DoClick" Icon="@IconService[IconNames.Export]">@LanguageService["show_export"]</MudNavLink>
                <MudDivider />
                <MudNavLink OnClick="DoClick" Icon="@IconService[IconNames.SafeSquareOutline]">@LanguageService["safe_open"]</MudNavLink>
                <MudNavLink OnClick="DoClick" Icon="@IconService[IconNames.SafeSquareOutline]">@LanguageService["safe_close"]</MudNavLink>
                <MudNavLink OnClick="DoClick" Icon="@IconService[IconNames.LockReset]">@LanguageService["safe_change_password"]</MudNavLink>
                <MudDivider />
                <MudNavLink OnClick="DoClick" Icon="@IconService[IconNames.Key]">@LanguageService["show_transfer_code"]</MudNavLink>
                <MudNavLink Href="/settings" Icon="@IconService[IconNames.Settings]">@LanguageService["show_settings"]</MudNavLink>
                <MudNavLink OnClick="DoClick" Icon="@IconService[IconNames.Information]">@LanguageService["show_info"]</MudNavLink>
            </MudNavMenu>
        </ChildContent>
    </MudMenu>
</MudAppBar>

<div id="content" Style="background-color:#aaaaaa">
    <h3>NoteRepositoryPage</h3>


    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" />
</div>

<div hidden>
    @* Declare icons which are used more than once as linkable icons, to reduce page size *@
    @IconService.GetLinkableSvgs( new [] {
        "magnify",
        "close-circle-outline",
        "arrow-all",
        "lock",
        "lock-open-variant",
        "lock-outline",
        "delete",
        "pin",
        "tag-multiple",
        "tag-off"
    });
</div>

@code {
    private string _filter;

    private string Filter 
    {
        get { return _filter; }
        set 
        {
            _filter = value;
            if (string.IsNullOrEmpty(_filter))
            {
                FilterIcon = IconService[IconNames.Magnify];
                //if (FilterInput != null)
                //    FilterInput.OnAdornmentClick = EventCallback<MouseEventArgs>.Empty;
            }
            else
            {
                FilterIcon = IconService[IconNames.CloseCircleOutline];
                //if (FilterInput != null)
                //    FilterInput.OnAdornmentClick = new EventCallback<MouseEventArgs>(this, ClearFilter);
            }
        }
    }

    private void ClearFilter()
    {
        Filter = null;
    }

    public MudInput<string> FilterInput { get; set; }

    private string FilterIcon { get; set; }

    private MudMenu OverflowMenu { get; set; }

    private void DoClick(MouseEventArgs args)
    {
        Snackbar.Add("OnClick Invoked");
        OverflowMenu.CloseMenu();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Filter = null;
    }

    public void Dispose()
    {
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (OverflowMenu != null)
        {
            string style = OverflowMenu.Style;
        }
    }

}
