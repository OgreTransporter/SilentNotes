@page "/"
@using System.ComponentModel
@using System.Windows.Input;
@using SilentNotes.Models
@using SilentNotes.ViewModels
@using SilentNotes.Services

@inject ISnackbar Snackbar
@inject ILanguageService LanguageService
@inject ISettingsService SettingsService
@inject IThemeService ThemeService
@inject ISvgIconService IconService
@inject IRepositoryStorageService RepositoryStorageService
@inject IEnvironmentService EnvironmentService
@inject ICryptoRandomService CryptoRandomSource

@implements IDisposable

<style type="text/css">
    body {
        @(ThemeService.CssBackgroundColor)
    }
    .note-viewer {
        font-size: @(ViewModel.NoteBaseFontSize)px !important;
    }
    .note-card {
        min-height: @(ViewModel.NoteMinHeight)px;
        max-height: @(ViewModel.NoteMaxHeight)px;
    }
</style>

@* Main menu *@
<MudAppBar Fixed="true" Dense="true">
    <MudSpacer />

    <MudPaper Class="d-inline-flex align-center rounded-pill pa-0" MaxHeight="36px" Elevation="0">
        <MudInput @bind-Value="ViewModel.Filter"
            Class="filter-input ml-2 mr-1 my-0"
            Adornment="Adornment.End" AdornmentIcon="@FilterIcon" OnAdornmentClick="@(() => ViewModel.ClearFilterCommand.Execute(null))"
            Immediate="true" />
    </MudPaper>

    <MudIconButton Class="d-none d-sm-flex" Icon="@IconService[IconNames.CloudSync]" Color="Color.Inherit" />

    <MudMenu @ref="OverflowMenu" Dense="true" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
        <ActivatorContent>
            <MudIconButton Icon="@IconService[IconNames.DotsVertical]" Color="Color.Inherit" />
        </ActivatorContent>
        <ChildContent>
            <MudNavMenu Rounded="true" Margin="Margin.Dense" Class="px-1">
                <MudNavLink Class="d-sm-none" OnClick="DoClick" Icon="@IconService[IconNames.NoteTextOutline]">@LanguageService["note_create_new"]</MudNavLink>
                <MudNavLink OnClick="DoClick" Icon="@IconService[IconNames.OrderBoolAscendingVariant]">@LanguageService["checklist_create_new"]</MudNavLink>
                <MudNavLink OnClick="DoClick" Icon="@IconService[IconNames.DeleteEmpty]">@LanguageService["show_recyclebin"]</MudNavLink>
                <MudNavLink OnClick="DoClick" Icon="@IconService[IconNames.Export]">@LanguageService["show_export"]</MudNavLink>
                <MudDivider />
                <MudNavLink OnClick="DoClick" Icon="@IconService[IconNames.SafeSquareOutline]">@LanguageService["safe_open"]</MudNavLink>
                <MudNavLink OnClick="DoClick" Icon="@IconService[IconNames.SafeSquareOutline]">@LanguageService["safe_close"]</MudNavLink>
                <MudNavLink OnClick="DoClick" Icon="@IconService[IconNames.LockReset]">@LanguageService["safe_change_password"]</MudNavLink>
                <MudDivider />
                <MudNavLink OnClick="DoClick" Icon="@IconService[IconNames.Key]">@LanguageService["show_transfer_code"]</MudNavLink>
                <MudNavLink Href="/settings" Icon="@IconService[IconNames.Settings]">@LanguageService["show_settings"]</MudNavLink>
                <MudNavLink OnClick="DoClick" Icon="@IconService[IconNames.Information]">@LanguageService["show_info"]</MudNavLink>
            </MudNavMenu>
        </ChildContent>
    </MudMenu>
</MudAppBar>

@* body *@
<div id="content" class="pl-2 pt-0 pr-2 pb-2">
    <ul class="wraplist">
        @foreach (var note in ViewModel.FilteredNotes)
        {
            <li @key="note.Id" class="wraplist-item">
                <div class="note-card @note.GetDarkClass()" style="background-color:@note.BackgroundColorHex">
                    @if (@note.IsLocked)
                    {
                        <span class="locked">@IconService.EmbedSvgLink(IconNames.LockOutline)</span>
                    }
                    else
                    {
                        <div class="note-viewer over-view">
                            @((MarkupString)note.GetShortenedUnlockedHtmlContent())
                        </div>
                    }
                </div>
            </li>
        }
    </ul>
</div>

<MudFab Class="fab" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" />

<div hidden>
    @* Declare icons which can be reused multiple times, to reduce page size *@
    @IconService.EmbedLinkableSvgs( new [] {
        IconNames.Magnify,
        IconNames.CloseCircleOutline,
        IconNames.LockOutline,
    });
</div>

@code {
    private bool _isDisposed;

    /// <summary>
    /// Initializes a new instance of the <see cref="NoteRepositoryPage"/> class.
    /// </summary>
    protected override Task OnInitializedAsync()
    {
        RepositoryStorageLoadResult loadResult = RepositoryStorageService.LoadRepositoryOrDefault(out NoteRepositoryModel noteRepositoryModel);
        if (loadResult == RepositoryStorageLoadResult.InvalidRepository)
            throw new Exception("Invalid repository");

        ViewModel = new NoteRepositoryViewModel(
            noteRepositoryModel,
            LanguageService,
            ThemeService,
            SettingsService,
            EnvironmentService,
            CryptoRandomSource);
        //ViewModel.PropertyChanged += HandlePropertyChanged;
        return Task.CompletedTask;
    }

    /// <summary>
    /// Finalizes an ainstance of the <see cref="NoteRepositoryPage"/> class.
    /// </summary>
    public void Dispose()
    {
        if (_isDisposed)
            return;
        _isDisposed = true;
        //ViewModel.PropertyChanged -= HandlePropertyChanged;
    }

    /// <summary>
    /// Gets or sets the datacontext of this view.
    /// </summary>
    private NoteRepositoryViewModel ViewModel { get; set; }

    //private void HandlePropertyChanged(object sender, PropertyChangedEventArgs e)
    //{
    //}

    /// <summary>
    /// Gets the svg icon for filtering (magnifier or clear)
    /// </summary>
    private string FilterIcon
    {
        get { return IconService.GetSvgLink(ViewModel.IsFiltered ? IconNames.CloseCircleOutline : IconNames.Magnify); }
    }

    private MudMenu OverflowMenu { get; set; }

    private void DoClick(MouseEventArgs args)
    {
        Snackbar.Add("OnClick Invoked");
        OverflowMenu.CloseMenu();
    }
}
