@page "/checklist/{NoteId}"
@using System.ComponentModel
@using MudBlazor.Utilities;
@using SilentNotes.Models
@using SilentNotes.ViewModels
@using SilentNotes.Services

@inject ILanguageService LanguageService
@inject ISvgIconService IconService
@inject IKeyboardShortcutService KeyboardShortcutService
@inject ISettingsService SettingsService
@inject IEnvironmentService EnvironmentService
@inject IThemeService ThemeService
@inject IFeedbackService FeedbackService
@inject IFilePickerService FilePickerService
@inject ICloudStorageClientFactory CloudStorageClientFactory

@implements IDisposable

<style type="text/css">
</style>

@* Main menu *@
<MudAppBar Fixed="true" Class="" Dense="true">
	<MudIconButton @ref="_backButton" Href="/back" Icon="@IconService[IconNames.ArrowLeft]" Color="Color.Inherit" Class="mr-5" Title="@LanguageService["back"]" Edge="Edge.Start" />

	<MudSpacer />

	<MudMenu @ref="_overflowMenu" Dense="true" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
		<ActivatorContent>
			<MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
		</ActivatorContent>
		<ChildContent>
		</ChildContent>
	</MudMenu>
</MudAppBar>

@* body *@
<MudContainer id="content" Class="mud-container-left mud-container-p" MaxWidth="MaxWidth.Small">
	<h2 class="h-colored">Checklist</h2>

</MudContainer>

@code {
	private bool _isDisposed;
	private MudMenu _overflowMenu;
	private MudBaseButton _backButton;
	private IKeyboardShortcuts _keyboardShortcuts;

	protected override void OnParametersSet()
	{
		base.OnParametersSet();
		//ViewModel = new SettingsViewModel(SettingsService, LanguageService, EnvironmentService, ThemeService, FeedbackService, CloudStorageClientFactory, FilePickerService);
		//ViewModel.PropertyChanged += PropertyChangedHandler;

		_keyboardShortcuts = KeyboardShortcutService.CreateShortcuts()
			.Add(ModCode.None, Code.Escape, () => _backButton);
	}

	public void Dispose()
	{
		if (_isDisposed)
			return;
		_isDisposed = true;
		_keyboardShortcuts.Dispose();
		//ViewModel.PropertyChanged -= PropertyChangedHandler;
	}

	private SettingsViewModel ViewModel { get; set; }

	[Parameter]
	public string NoteId { get; set; } = default!;

	private void PropertyChangedHandler(object sender, PropertyChangedEventArgs e)
	{
		if (e.PropertyName == "page")
			StateHasChanged();
	}
}
