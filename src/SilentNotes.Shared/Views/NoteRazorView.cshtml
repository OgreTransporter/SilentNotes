@using SilentNotes.ViewModels
@model NoteViewModel
<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <base href="@Model.HtmlBase">
    <title>SilentNotes</title>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no, user-scalable=no">

    <link href="bootstrap.min.css" rel="stylesheet" />
    <link href="silentnotes.css" rel="stylesheet" />
    <link href="@(Model.Theme.DarkMode ? "silentnotes.dark.css" : "silentnotes.light.css")" rel="stylesheet" />

    <link href="note-view.css" rel="stylesheet">

    <script src="@Model.HtmlRecource["vuejs"]"></script>
    <script src="@Model.HtmlRecource["jqueryjs"]"></script>
    <script src="@Model.HtmlRecource["bootstrapjs"]"></script>
    <script src="@Model.HtmlRecource["bootstrapautocompletejs"]"></script>
    <script src="@Model.HtmlRecource["prosemirror"]"></script>
    <script src="silentnotes.js"></script>

    <style type="text/css">
body { background-color: transparent; }

div.ProseMirror {
	border: none 0;
    font-size: @(Model.NoteBaseFontSize)px !important;
}
div.ProseMirror:focus {
    outline: none;
}
div.ProseMirror li p {
    display: inline-block;
}

.color-btn { color: black; }
.color-btn.dark { color: white; }
.locked {
    position: relative;
    height: 100%;
}
.locked svg {
    fill: rgba(160, 160, 160, 0.4);
}
    </style>
    <script>
        var editor;
        var linkDialog;

        function toggleFormat(formatName, formatParameter) {
            switch (formatName) {
              case 'header':
                editor.chain().focus().toggleHeading({ level: formatParameter }).run(); break;
              case 'bold':
                editor.chain().focus().toggleBold().run(); break;
              case 'italic':
                editor.chain().focus().toggleItalic().run(); break;
              case 'underline':
                editor.chain().focus().toggleUnderline().run(); break;
              case 'strike':
                editor.chain().focus().toggleStrike().run(); break;
              case 'code-block':
                editor.chain().focus().toggleCodeBlock().run(); break;
              case 'blockquote':
                editor.chain().focus().toggleBlockquote().run(); break;
              case 'bullet-list':
                editor.chain().focus().toggleBulletList().run(); break;
              case 'ordered-list':
                editor.chain().focus().toggleOrderedList().run(); break;
            }
            refreshActiveFormatState();
        }

        function refreshActiveFormatState() {
            vm.Header1Active = editor.isActive('heading', { level: 1 });
            vm.Header2Active = editor.isActive('heading', { level: 2 });
            vm.Header3Active = editor.isActive('heading', { level: 3 });
            vm.BoldActive = editor.isActive('bold');
            vm.ItalicActive = editor.isActive('italic');
            vm.UnderlineActive = editor.isActive('underline');
            vm.StrikeActive = editor.isActive('strike');
            vm.CodeActive = editor.isActive('codeBlock');
            vm.QuoteActive = editor.isActive('blockquote');
            vm.ListBulletActive = editor.isActive('bulletList');
            vm.ListOrderedActive = editor.isActive('orderedList');
        }

        function showLinkDialog() {
            if (vm.ShoppingModeActive) return;

            var selectedUrl = editor.getAttributes('link').href;
            if (selectedUrl) {
                vm.OldLinkUrl = selectedUrl;
                vm.NewLinkUrl = selectedUrl;
            }
            else {
                vm.OldLinkUrl = '';
                vm.NewLinkUrl = '';
            }
            linkDialog.show();
        }

        function linkDialogOpenPressed() {
            location.href = vm.NewLinkUrl;
        }

        function linkDialogOkPressed() {
            var commandChain = editor.chain().focus();
            if (vm.NewLinkUrl != vm.OldLinkUrl) {
                if (vm.NewLinkUrl) {
                    commandChain.extendMarkRange('link').setLink({ href: vm.NewLinkUrl });
                }
                else {
                    commandChain.extendMarkRange('link').unsetLink();
                }
            }
            var selection = editor.view.state.selection;
            commandChain.setTextSelection(selection.$to.pos);
            commandChain.run();

            linkDialog.hide();
        }

        function addTag() {
            var tagText = document.getElementById('tags').value.trim();
            if (vm.ShoppingModeActive || tagText === '')
                return;
            document.getElementById('tags').value = '';
            vueCommandExecute('AddTagCommand', tagText);
        }

        function deleteTag(e) {
            if (vm.ShoppingModeActive)
                return;
            vueCommandExecute('DeleteTagCommand', e.currentTarget.attributes['data-tag'].value);
        }

        function getTagSuggestions() {
            return vm.$data.TagSuggestions.map(function (item) {
                return { value: item }
            });
        }

        function getNoteHtmlContent() {
            return '';
        }

        function setNoteHtmlContent(text) {
        }

        function isSearchDialogHidden() {
            return $('#search-dialog').hasClass('hidden');
        }

        function toggleSearchDialog() {
            showSearchDialog(isSearchDialogHidden());
        }

        function showSearchDialog(visible) {
        }

        function setStartingSearchFilter(filter) {
        }

        function scrollToTop() {
        }

        function scrollToBottom() {
        }

        function toggleShoppingMode() {
            vm.ShoppingModeActive = !vm.ShoppingModeActive;
            editor.setEditable(!vm.ShoppingModeActive);
        }

        function vueLoaded() {
            var editorElement = document.getElementById('myeditor');
            editor = ProseMirrorBundle.initializeEditor(editorElement);
            editor.commands.setContent('@{WriteLiteral(Model.GetUnlockedHtmlContentAsJavaScriptString());}');
            editor.on('selectionUpdate', function (editor) {
                refreshActiveFormatState();
            });

            document.addEventListener('custom-link-clicked', function () {
                showLinkDialog();
            });

            var linkDialogElement = document.getElementById('linkDialog');
            linkDialog = new bootstrap.Modal(linkDialogElement);
            linkDialogElement.addEventListener('keydown', function (event) {
                if (event.keyCode == 13) {
                    event.preventDefault();
                    linkDialogOkPressed();
                }
            });
        }

        @{WriteLiteral(Model.VueDataBindingScript);}
    </script>
</head>
<body>
    <div id="vueDataBinding">
        <nav id="navigation" class="d-flex">
            <button class="nav-item mr-auto" v-on:click="GoBackCommand" title="@Model.Language["back"]">@{WriteLiteral(Model.Icon["arrow-left"]);}</button>
            <span id="quill-toolbar" hidden></span> <!--we need the initialized quill theme for editing hyperlinks-->

            @if (!Model.IsLocked)
            {   
                <button class="nav-item" onclick="toggleFormat('bold');" v-bind:class="{ active: BoldActive }" v-bind:disabled="ShoppingModeActive" title="@Model.Language["note_bold"]">@{WriteLiteral(Model.Icon["format-bold"]);}</button>
                <button class="nav-item" onclick="toggleFormat('italic');" v-bind:class="{ active: ItalicActive }" v-bind:disabled="ShoppingModeActive" title="@Model.Language["note_italic"]">@{WriteLiteral(Model.Icon["format-italic"]);}</button>
                <span class="show-only-on-wide-browser">
                    <button class="nav-item" onclick="toggleFormat('underline');" v-bind:class="{ active: UnderlineActive }" v-bind:disabled="ShoppingModeActive" title="@Model.Language["note_underline"]">@{WriteLiteral(Model.Icon["format-underline"]);}</button>
                    <button class="nav-item" onclick="toggleFormat('strike');" v-bind:class="{ active: StrikeActive }" v-bind:disabled="ShoppingModeActive" title="@Model.Language["note_strike"]">@{WriteLiteral(Model.Icon["format-strikethrough"]);}</button>
                    <button class="nav-item" onclick="toggleFormat('ordered-list');" v-bind:class="{ active: ListOrderedActive }" v-bind:disabled="ShoppingModeActive" title="@Model.Language["note_list_ordered"]">@{WriteLiteral(Model.Icon["format-list-numbers"]);}</button>
                    <button class="nav-item" onclick="toggleFormat('bullet-list');" v-bind:class="{ active: ListBulletActive }" v-bind:disabled="ShoppingModeActive" title="@Model.Language["note_list_unordered"]">@{WriteLiteral(Model.Icon["format-list-bulleted"]);}</button>
                </span>
                <button class="nav-item" onclick="toggleShoppingMode(); return false;" v-bind:class="{ active: ShoppingModeActive }" title="@Model.Language["note_shopping_mode"]">@{WriteLiteral(Model.Icon["keyboard_off_outline"]);}</button>
                <button class="nav-item" v-on:click="TogglePinnedCommand" v-bind:class="{ active: IsPinned }" v-bind:disabled="ShoppingModeActive" title="@Model.Language["note_pin"]">@{WriteLiteral(Model.Icon["pin"]);}</button>
                <button class="nav-item" onclick="toggleSearchDialog(); return false;" title="@Model.Language["search"]">@{WriteLiteral(Model.Icon["magnify"]);}</button>

                <div class="dropdown">
                    <button class="nav-item" id="navOverflowMenu" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" v-bind:disabled="ShoppingModeActive">
                        @{WriteLiteral(Model.Icon["dots-vertical"]);}
                    </button>
                    <div class="dropdown-menu dropdown-menu-right" aria-labelledby="navOverflowMenu">
                        <div class="dropdown-item" data-toggle="modal" data-target="#colorPaletteModal">@{WriteLiteral(Model.Icon["palette"]);} @Model.Language["note_colors"]</div>
                        <div class="dropdown-divider"></div>
                        <div class="dropdown-item" v-bind:class="{ active: Header1Active }" onclick="toggleFormat('header', 1);">@{WriteLiteral(Model.Icon["format-header-1"]);} @Model.Language["note_header1"]</div>
                        <div class="dropdown-item" v-bind:class="{ active: Header2Active }" onclick="toggleFormat('header', 2);">@{WriteLiteral(Model.Icon["format-header-2"]);} @Model.Language["note_header2"]</div>
                        <div class="dropdown-item" v-bind:class="{ active: Header3Active }" onclick="toggleFormat('header', 3);">@{WriteLiteral(Model.Icon["format-header-3"]);} @Model.Language["note_header3"]</div>
                        <div class="dropdown-item show-only-on-narrow-browser" v-bind:class="{ active: UnderlineActive }" onclick="toggleFormat('underline');">@{WriteLiteral(Model.Icon["format-underline"]);} @Model.Language["note_underline"]</div>
                        <div class="dropdown-item show-only-on-narrow-browser" v-bind:class="{ active: StrikeActive }" onclick="toggleFormat('strike');">@{WriteLiteral(Model.Icon["format-strikethrough"]);} @Model.Language["note_strike"]</div>
                        <div class="dropdown-item show-only-on-narrow-browser" v-bind:class="{ active: ListOrderedActive }" onclick="toggleFormat('ordered-list');">@{WriteLiteral(Model.Icon["format-list-numbers"]);} @Model.Language["note_list_ordered"]</div>
                        <div class="dropdown-item show-only-on-narrow-browser" v-bind:class="{ active: ListBulletActive }" onclick="toggleFormat('bullet-list');">@{WriteLiteral(Model.Icon["format-list-bulleted"]);} @Model.Language["note_list_unordered"]</div>
                        <div class="dropdown-item" v-bind:class="{ active: CodeActive }" onclick="toggleFormat('code-block');">@{WriteLiteral(Model.Icon["code-braces"]);} @Model.Language["note_code"]</div>
                        <div class="dropdown-item" v-bind:class="{ active: QuoteActive }" onclick="toggleFormat('blockquote');">@{WriteLiteral(Model.Icon["format-quote-close"]);} @Model.Language["note_quotation"]</div>
                        <div class="dropdown-item" onclick="showLinkDialog();">@{WriteLiteral(Model.Icon["link-variant"]);} @Model.Language["note_link"]</div>
                        @if (Model.ShowManualSynchronization)
                        {
                            <div class="dropdown-divider"></div>
                            <div class="dropdown-item" v-on:click="PushNoteToOnlineStorageCommand">@{WriteLiteral(Model.Icon["cloud-upload"]);} @Model.Language["note_push_to_server"]</div>
                            <div class="dropdown-item" v-on:click="PullNoteFromOnlineStorageCommand">@{WriteLiteral(Model.Icon["cloud-download"]);} @Model.Language["note_pull_from_server"]</div>
                        }
                    </div>
                </div>
            }
        </nav>

        <div id="content" v-bind:class="{ dark: IsDark }" v-bind:style="{ backgroundColor: BackgroundColorHex }">
            @if (Model.IsLocked)
            {
                <span class="locked d-flex justify-content-center align-items-center" v-bind:class="{ dark: IsDark }"><svg width='128' height='128' viewBox='0 0 24 24'><use xlink:href="#svg-lock-outline" /></svg></span>
            }
            else
            {
                <div id="myeditor" class="note-viewer detail-view @Model.CssClassNoteType"></div>
            }
        </div>

        <div id="tag-container" v-bind:class="{ dark: IsDark }">
            <div class="tag-input-group">
                <div class="input-group">
                    <input id="tags" class="form-control" v-bind:disabled="ShoppingModeActive" placeholder='@Model.Language["tag_add"]' type="text">
                    <div class="input-group-append">
                        <div id="add-tag" class="btn" onclick="addTag();"><svg width='16' height='16' viewBox='0 0 24 24'><use xlink:href="#svg-plus" /></svg></div>
                    </div>
                </div>
            </div>
            <ul class="tag-list">
                <li class="tag-item" v-bind:style="{ backgroundColor: BackgroundColorHex }" v-for="Tag in Tags">
                    {{Tag}}
                    <div class="tag-handle" onclick="deleteTag(event);" v-bind:data-tag="Tag"><svg width='16' height='16' viewBox='0 0 24 24'><use xlink:href="#svg-delete" /></svg></div>
                </li>
            </ul>
        </div>

        <div id="search-dialog" class="hidden">
            <div class="nav-filter">
                <input id="TxtFilter" autocomplete="off" />
                <svg id="filter-cancel-icon" width='24' height='24' viewBox='0 0 24 24' class="" onclick="showSearchDialog(false);"><use xlink:href="#svg-close-circle-outline" /></svg>
            </div>
        </div>

        <div class="modal" id="colorPaletteModal" tabindex="-1" role="dialog" aria-hidden="true">
            <div class="modal-dialog modal-sm" role="document">
                <div class="modal-content p-2">
                    <button type="button" class="close d-flex justify-content-end" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <div class="d-flex flex-wrap">
                        @foreach (var backgroundColor in @Model.BackgroundColorsHex)
                        {
                            <div class="d-flex align-items-center justify-content-center color-btn @Model.GetDarkClass(backgroundColor)" data-dismiss="modal" v-on:click="BackgroundColorHex='@(backgroundColor)'" style="background-color: @backgroundColor"><span>Lorem ipsum</span></div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="modal" id="linkDialog" tabindex="-1" role="dialog" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content p-2">
                    <div class="modal-body">
                        <div class="input-group mb-3">
                            <input type="url" v-model="NewLinkUrl" class="form-control" v-focus>
                            <button type="button" class="btn btn-danger" onclick="vm.NewLinkUrl = '';"><svg width='16' height='16' viewBox='0 0 24 24'><use xlink:href="#svg-delete" /></svg></button>
                        </div>
                    </div>
                    <div class="modal-footer">
                      <button type="button" class="btn btn-secondary" onclick="linkDialogOpenPressed();">Visit link <svg width='16' height='16' viewBox='0 0 24 24'><use xlink:href="#svg-link-variant" /></svg></button>
                      <button type="button" class="btn btn-primary" onclick="linkDialogOkPressed();">@Model.Language["ok"]</button>
                      <button type="button" class="btn btn-secondary" data-dismiss="modal">@Model.Language["cancel"]</button>
                    </div>
                </div>
            </div>
        </div>

        <div hidden>
            @{WriteLiteral(Model.Icon.LoadIcon("lock-outline", new[] { new KeyValuePair<string, string>("id", "svg-lock-outline") }));}
            @{WriteLiteral(Model.Icon.LoadIcon("close-circle-outline", new[] { new KeyValuePair<string, string>("id", "svg-close-circle-outline") }));}
            @{WriteLiteral(Model.Icon.LoadIcon("plus", new[] { new KeyValuePair<string, string>("id", "svg-plus") }));}
            @{WriteLiteral(Model.Icon.LoadIcon("delete", new[] { new KeyValuePair<string, string>("id", "svg-delete") }));}
            @{WriteLiteral(Model.Icon.LoadIcon("link-variant", new[] { new KeyValuePair<string, string>("id", "svg-link-variant") }));}
        </div>
    </div>
</body>
</html>