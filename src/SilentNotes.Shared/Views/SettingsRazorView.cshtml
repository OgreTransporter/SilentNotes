@using SilentNotes.ViewModels
@model SettingsViewModel
<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <base href="@Model.HtmlBase">
    <title>SilentNotes</title>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no, user-scalable=no">

    <link href="bootstrap.min.css" rel="stylesheet" />
    <link href="silentnotes.css" rel="stylesheet" />
    <link href="@(Model.Theme.DarkMode ? "silentnotes.dark.css" : "silentnotes.light.css")" rel="stylesheet" />

    <script src="@Model.HtmlRecource["vuejs"]"></script>
    <script src="@Model.HtmlRecource["jqueryjs"]"></script>
    <script src="bootstrap.bundle.min.js"></script>
    <script src="silentnotes.js"></script>

    <style type="text/css">
        .background-icon {
            right: -128px;
            top: -154px;
        }

        #theme-control {
            height: 90px;
        }

        #color-control {
            height: 50px;
        }

        .theme-list,
        .color-list {
            max-height: 360px;
            overflow-y: scroll;
        }

        .theme-item,
        .color-item {
            display: inline-block;
            width: 90px;
            height: 128px;
        }

        .color-btn { color: black; }
        .color-btn.dark { color: white; }
    </style>
    <script>
        @{WriteLiteral(Model.VueDataBindingScript);}
    </script>
</head>
<body><div id="vueDataBinding">
    <nav id="navigation" class="d-flex">
        <button class="nav-item mr-auto" v-on:click="GoBackCommand" title="@Model.Language["back"]">@{WriteLiteral(Model.Icon["arrow-left"]);}</button>

        <div class="dropdown">
            <button class="nav-item" id="navOverflowMenu" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                @{WriteLiteral(Model.Icon["dots-vertical"]);}
            </button>
            <div class="dropdown-menu dropdown-menu-right" aria-labelledby="navOverflowMenu">
                <div class="dropdown-item" v-on:click="TestNewLocalizationCommand">@{WriteLiteral(Model.Icon["earth"]);} @Model.Language["gui_localization_test"]</div>
            </div>
        </div>
    </nav>

    <div id="content" class="container-fluid p-4">
        <svg class="background-icon" width='24' height='24' viewBox='0 0 24 24'><use xlink:href="#svg-settings" /></svg>

        <h2>@Model.Language["gui_texture"]</h2>
        <form class="mb-4 col-md-9 col-lg-6">
            <div class="form-row form-group">
                <div id="theme-control" class="form-control">
                    <div id="Theme" class="dropdown d-flex">
                        <button class="theme-preview btn h-100 flex-fill" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" v-bind:style="{ backgroundImage: 'url(' + SelectedThemeImage + ')' }">
                        </button>
                        <div class="dropdown-menu theme-list" aria-labelledby="themeChooser">
                            @foreach (var theme in @Model.Theme.Themes)
                            {
                                <div class="dropdown-item theme-item" v-on:click="SelectedTheme='@(theme.Id)'" style="background: url(@(theme.Image));"></div>
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-10">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="UseSolidColorTheme" v-model="UseSolidColorTheme">
                        <label class="form-check-label" for="UseSolidColorTheme">@Model.Language["gui_theme_solid_color"]</label>
                    </div>
                </div>
                <div class="form-group col-2">
                    <input class="form-control" type="color" v-model="ColorForSolidThemeHex">
                </div>
            </div>
            <div class="form-row form-group">
                <select class="form-control" v-model="SelectedThemeMode">
                    <option value="Auto">@Model.Language["gui_theme_auto"]</option>
                    <option value="Dark">@Model.Language["gui_theme_dark"]</option>
                    <option value="Light">@Model.Language["gui_theme_light"]</option>
                </select>
            </div>
            <div class="form-row">
                <div class="form-group col-10">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="UseColorForAllNotesInDarkMode" v-model="UseColorForAllNotesInDarkMode">
                        <label class="form-check-label" for="UseColorForAllNotesInDarkMode">@Model.Language["gui_theme_color_all_dark"]</label>
                    </div>
                </div>
                <div class="form-group col-2">
                    <input class="form-control" type="color" v-model="ColorForAllNotesInDarkModeHex">
                </div>
            </div>

            <div class="form-row form-group">
                <label class="col-form-label" for="Color">@Model.Language["gui_default_color"]</label>
                <div id="color-control" class="form-control">
                    <div id="DefaultNoteColor" class="dropdown d-flex">
                        <button id="Color" class="color-preview btn m-0 h-100 flex-fill" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" v-bind:style="{ backgroundColor: DefaultNoteColorHex }">
                        </button>
                        <div class="dropdown-menu color-list" aria-labelledby="colorChooser">
                            @foreach (var backgroundColor in @Model.NoteColorsHex)
                            {
                                <div class="dropdown-item color-btn @Model.GetDarkClass(backgroundColor)" v-on:click="DefaultNoteColorHex='@backgroundColor'" style="background-color: @backgroundColor">Lorem ipsum</div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </form>

        <h2>@Model.Language["gui"]</h2>
        <form class="mb-4 col-md-9 col-lg-6">
            <div class="form-row form-group">
                <label class="col-form-label" for="FontSizeStep">@Model.Language["gui_font_size"]</label>
                <div class="form-control">
                    <input class="custom-range col-sm-6" type="range" id="FontSizeStep" v-model="FontSizeStep" min="-3" max="3" step="1">
                </div>
            </div>
            <div class="form-row form-group">
                <label class="col-form-label" for="NoteMaxHeightStep">@Model.Language["gui_note_max_size"]</label>
                <div class="form-control">
                    <input class="custom-range col-sm-6" type="range" id="NoteMaxHeightStep" v-model="NoteMaxHeightStep" min="-4" max="4" step="1">
                </div>
            </div>

            <div class="form-row form-group">
                <label class="col-form-label" for="SelectedNoteInsertionMode">@Model.Language["gui_note_insertion"]</label>
                <select class="form-control" id="SelectedNoteInsertionMode" v-model="SelectedNoteInsertionMode">
                    <option value="AtTop">@Model.Language["gui_note_insertion_top"]</option>
                    <option value="AtBottom">@Model.Language["gui_note_insertion_bottom"]</option>
                </select>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="RememberLastTagFilter" v-model="RememberLastTagFilter">
                        <label class="form-check-label" for="RememberLastTagFilter">@Model.Language["gui_remember_last_tag_filter"]</label>
                    </div>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="HideClosedSafeNotes" v-model="HideClosedSafeNotes">
                        <label class="form-check-label" for="HideClosedSafeNotes">@Model.Language["gui_hide_closed_safe_notes"]</label>
                    </div>
                </div>
            </div>

            @if (Model.CanKeepScreenOn)
            {
                <div class="form-row form-group">
                    <label class="col-form-label" for="KeepScreenOpenStep">{{KeepScreenOnDurationTitle}}</label>
                    <div class="form-control">
                        <input class="custom-range col-sm-6" type="range" id="KeepScreenOpenStep" v-model="KeepScreenOnDuration" min="1" max="30" step="1">
                    </div>
                </div>
            }
        </form>

        <h2>@Model.Language["sync"]</h2>
        <form class="mb-4 col-md-9 col-lg-6">
            <div class="form-row form-group">
                <label class="col-form-label" for="SelectedAutoSyncMode">@Model.Language["sync_auto"]</label>
                <select class="form-control" id="SelectedAutoSyncMode" v-model="SelectedAutoSyncMode">
                    <option value="Never">@Model.Language["sync_auto_never"]</option>
                    <option value="CostFreeInternetOnly">@Model.Language["sync_auto_costfree"]</option>
                    <option value="Always">@Model.Language["sync_auto_always"]</option>
                </select>
            </div>
            <div class="form-row form-group">
                <label class="col-form-label" for="CloudStorageSettings">@Model.Language["cloud_service"]</label>
                <textarea class="form-control" id="CloudStorageSettings" v-model="AccountSummary" rows="4" readonly></textarea>
            </div>
            <button type="button" class="btn btn-secondary mb-2 mr-1" v-on:click="ChangeCloudSettingsCommand" title="@Model.Language["cloud_change_settings_desc"]">@Model.Language["cloud_change_settings"]</button>
            <button type="button" class="btn btn-danger mb-2 mr-1" v-on:click="ClearCloudSettingsCommand" v-bind:disabled="ClearCloudSettingsDisabled" title="@Model.Language["cloud_clear_settings_desc"]">@Model.Language["cloud_clear_settings"]</button>
        </form>

        <h2>@Model.Language["security"]</h2>
        <form class="mb-4 col-md-9 col-lg-6">
            <div class="form-row form-group">
                <label class="col-form-label" for="SelectedEncryptionAlgorithm">@Model.Language["encryption_algorithm"]</label>
                <select class="form-control" id="SelectedEncryptionAlgorithm" v-model="SelectedEncryptionAlgorithm">
                    @foreach (var algorithm in @Model.EncryptionAlgorithms)
                    {
                        <option value="@algorithm.Value">@algorithm.Description</option>
                    }
                </select>
            </div>

            @if (Model.CanPreventScreenshots)
            {
                <div class="form-row">
                    <div class="form-group">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="PreventScreenshots" v-model="PreventScreenshots">
                            <label class="form-check-label" for="PreventScreenshots">@Model.Language["security_prevent_screenshots"]</label>
                        </div>
                    </div>
                </div>
            }
        </form>
    </div>

    <div hidden>
        @{WriteLiteral(Model.Icon.LoadIcon("settings", new[] { new KeyValuePair<string, string>("id", "svg-settings") }));}
    </div>
</div></body>
</html>
