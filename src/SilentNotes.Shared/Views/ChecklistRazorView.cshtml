@using SilentNotes.ViewModels
@model NoteViewModel
<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <base href="@Model.HtmlBase">
    <title>SilentNotes</title>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no, user-scalable=no">

    <link href="bootstrap.min.css" rel="stylesheet" />
    <link href="silentnotes.css" rel="stylesheet" />
    <link href="@(Model.Theme.DarkMode ? "silentnotes.dark.css" : "silentnotes.light.css")" rel="stylesheet" />

    <link href="quill/quill.snow.css" rel="stylesheet">
    <link href="note-view.css" rel="stylesheet">
    <link href="quillsearchhighlighter.css" rel="stylesheet">

    <script src="@Model.HtmlRecource["vuejs"]"></script>
    <script src="@Model.HtmlRecource["jqueryjs"]"></script>
    <script src="@Model.HtmlRecource["bootstrapjs"]"></script>
    <script src="@Model.HtmlRecource["bootstrapautocompletejs"]"></script>
    <script src="silentnotes.js"></script>
    <script src="checklist.js"></script>
    <script src="quill/quill.min.js"></script>
    <script src="quillsearchhighlighter.js"></script>

    <style type="text/css">
body { background-color: transparent; }

.note-viewer {
    font-size: @(Model.NoteBaseFontSize)px !important;
}
div .detail-view.checklist .ql-editor p::before { content: @{WriteLiteral(Model.Icon.LoadIconAsCssUrl("checkbox-blank-outline", new[] { new KeyValuePair<string, string>("fill", "#000000") }));}; }
div .detail-view.checklist .ql-editor p.done::before { content: @{WriteLiteral(Model.Icon.LoadIconAsCssUrl("check-box-outline", new[] { new KeyValuePair<string, string>("fill", "#000000") }));}; }
div .detail-view.checklist .ql-editor p.disabled::before { content: @{WriteLiteral(Model.Icon.LoadIconAsCssUrl("checkbox-blank-outline", new[] { new KeyValuePair<string, string>("fill", "#000000") }));}; }
div .detail-view.checklist .ql-editor p::after { content: @{WriteLiteral(Model.Icon.LoadIconAsCssUrl("delete", new[] { new KeyValuePair<string, string>("fill", "#000000") }));}; }
div.dark .detail-view.checklist .ql-editor p::before { content: @{WriteLiteral(Model.Icon.LoadIconAsCssUrl("checkbox-blank-outline", new[] { new KeyValuePair<string, string>("fill", "#FFFFFF") }));}; }
div.dark .detail-view.checklist .ql-editor p.done::before { content: @{WriteLiteral(Model.Icon.LoadIconAsCssUrl("check-box-outline", new[] { new KeyValuePair<string, string>("fill", "#FFFFFF") }));}; }
div.dark .detail-view.checklist .ql-editor p.disabled::before { content: @{WriteLiteral(Model.Icon.LoadIconAsCssUrl("checkbox-blank-outline", new[] { new KeyValuePair<string, string>("fill", "#FFFFFF") }));}; }
div.dark .detail-view.checklist .ql-editor p::after { content: @{WriteLiteral(Model.Icon.LoadIconAsCssUrl("delete", new[] { new KeyValuePair<string, string>("fill", "#FFFFFF") }));}; }

.color-btn { color: black; }
.color-btn.dark { color: white; }
.locked {
    position: relative;
    height: 100%;
}
.locked svg {
    fill: rgba(160, 160, 160, 0.4);
}
    </style>
    <script>
        var quill;
        var searchHighlighter;

        function toggleFormat(formatName) {
            var selectionFormat = quill.getFormat();
            var selectionFormatValue = selectionFormat[formatName];
            selectionFormatValue = !selectionFormatValue;
            quill.format(formatName, selectionFormatValue, 'user');
            refreshActiveFormatState();
        }

        function toggleBlockFormat(formatName, blockType) {
            var selectionFormat = quill.getFormat();
            var selectionFormatValue = selectionFormat[formatName];
            var newSelectionFormat; // undefined removes the block format
            if (selectionFormatValue !== blockType)
                newSelectionFormat = blockType;
            quill.format(formatName, newSelectionFormat, 'user');
            refreshActiveFormatState();
        }

        function addTag() {
            var tagText = document.getElementById('tags').value.trim();
            if (vm.ShoppingModeActive || tagText === '')
                return;
            document.getElementById('tags').value = '';
            vueCommandExecute('AddTagCommand', tagText);
        }

        function deleteTag(e) {
            if (vm.ShoppingModeActive)
                return;
            vueCommandExecute('DeleteTagCommand', e.currentTarget.attributes['data-tag'].value);
        }

        function getTagSuggestions() {
            return vm.$data.TagSuggestions.map(function (item) {
                return { value: item }
            });
        }

        function getNoteHtmlContent() {
            return quill.root.innerHTML;
        }

        function setNoteHtmlContent(text) {
            quill.setText(text, 'user');
        }

        function isSearchDialogHidden() {
            return $('#search-dialog').hasClass('hidden');
        }

        function toggleSearchDialog() {
            showSearchDialog(isSearchDialogHidden());
        }

        function showSearchDialog(visible) {
            if (visible) {
                // Open dialog
                $('#search-dialog').removeClass('hidden');
                $('#TxtFilter').focus();
                searchHighlighter.startListening();
            }
            else {
                // Close dialog
                searchHighlighter.stopListening();
                searchHighlighter.clearSearchHighlights();
                $('#search-dialog').addClass('hidden');
                $('#TxtFilter').val('');
            }
        }

        function setStartingSearchFilter(filter) {
            searchHighlighter.searchAndHighlight(filter, true, false); // this causes a focusin event
            quill.root.blur();
        }

        function scrollToTop() {
            var element = quill.root;
            element.scrollTop = 0;
        }

        function scrollToBottom() {
            var element = quill.root;
            element.scrollTop = element.scrollHeight;
        }

        function toggleShoppingMode() {
            vm.ShoppingModeActive = !vm.ShoppingModeActive;
            quill.enable(!vm.ShoppingModeActive);
        }

        function refreshActiveFormatState() {
            var selectionFormat = quill.getFormat();
            var formatValue = selectionFormat['header'];
            vm.Header1Active = formatValue == 1;
            vm.Header2Active = formatValue == 2;
            vm.Header3Active = formatValue == 3;
            formatValue = selectionFormat['list'];
            vm.ListOrderedActive = formatValue == 'ordered';
            vm.ListBulletActive = formatValue == 'bullet';
            vm.CodeActive = selectionFormat['code-block'];
            vm.QuoteActive = selectionFormat['blockquote'];
            vm.UnderlineActive = selectionFormat['underline'];
            vm.StrikeActive = selectionFormat['strike'];
        }

        function vueLoaded() {
            // quill "imports" the existing html content and looses the class attributes,
            // that's why we save and reapply the check states.
            var checkStates = saveCheckStates();
            quill = new Quill('#myeditor', {
                formats: ['header'],
            });
            restoreCheckStates(checkStates);

            quill.on('text-change', function (delta, oldDelta, source) {
                if (source === 'user') {
                    vuePropertyChanged('UnlockedHtmlContent', null);
                }
            });

            quill.on('selection-change', function (range, oldRange, source) {
                if (range) {
                    refreshActiveFormatState();
                }
            });

            $(quill.root).on("focusin", function () {
                if (isSearchDialogHidden())
                    searchHighlighter.clearSearchHighlights();
            });

            searchHighlighter = new QuillSearchHighlighter(quill, document.getElementById("TxtFilter"));

            var noteContent = getNoteHtmlContent();
            var noteIsNew = noteContent.length > 1 && noteContent.length < 42 && noteContent.replace(/<[^>]*>/g, '').trim().length == 0;
            if (noteIsNew) {
                toggleBlockFormat('header', 1);
            }

            quill.enable(!vm.ShoppingModeActive);

            $("#tags").autocomplete({
                source: getTagSuggestions,
                treshold: 0,
                maximumItems: 10,
                value: "value",
                label: "value",
                dropType: "dropup",
                onSelectItem: function (item, inputField) {
                    addTag();
                },
            });
            document.getElementById('tags').addEventListener("keyup", function (event) {
                if (event.key === 'Enter' || event.keyCode === 13) {
                    addTag();
                }
            });
        };

        @{WriteLiteral(Model.VueDataBindingScript);}
    </script>
</head>
<body><div id="vueDataBinding">
    <nav id="navigation" class="d-flex">
        <button class="nav-item mr-auto" v-on:click="GoBackCommand" title="@Model.Language["back"]">@{WriteLiteral(Model.Icon["arrow-left"]);}</button>

        @if (!Model.IsLocked)
        {
             
            <button class="nav-item" onclick="moveUp(true); return false;" v-bind:disabled="ShoppingModeActive" title="@Model.Language["checklist_move_to_top"]">@{WriteLiteral(Model.Icon["arrow-collapse-up"]);}</button>
            <button class="nav-item" onclick="moveUp(false); return false;" v-bind:disabled="ShoppingModeActive" title="@Model.Language["checklist_move_up"]">@{WriteLiteral(Model.Icon["arrow-up"]);}</button>
            <button class="nav-item" onclick="moveDown(false); return false;" v-bind:disabled="ShoppingModeActive" title="@Model.Language["checklist_move_down"]">@{WriteLiteral(Model.Icon["arrow-down"]);}</button>
            <button class="nav-item" onclick="moveDown(true); return false;" v-bind:disabled="ShoppingModeActive" title="@Model.Language["checklist_move_to_bottom"]">@{WriteLiteral(Model.Icon["arrow-collapse-down"]);}</button>
            <button class="nav-item" onclick="toggleShoppingMode(); return false;" v-bind:class="{ active: ShoppingModeActive }" title="@Model.Language["note_shopping_mode"]">@{WriteLiteral(Model.Icon["keyboard_off_outline"]);}</button>
            <button class="nav-item" v-on:click="TogglePinnedCommand" v-bind:class="{ active: IsPinned }" v-bind:disabled="ShoppingModeActive" title="@Model.Language["note_pin"]">@{WriteLiteral(Model.Icon["pin"]);}</button> 
            <button class="nav-item" onclick="toggleSearchDialog(); return false;" title="@Model.Language["search"]">@{WriteLiteral(Model.Icon["magnify"]);}</button>

            <div class="dropdown">
                <button class="nav-item" id="navOverflowMenu" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" v-bind:disabled="ShoppingModeActive">
                    @{WriteLiteral(Model.Icon["dots-vertical"]);}
                </button>
                <div class="dropdown-menu dropdown-menu-right" aria-labelledby="navOverflowMenu">
                    <div class="dropdown-item" data-toggle="modal" data-target="#colorPaletteModal">@{WriteLiteral(Model.Icon["palette"]);} @Model.Language["note_colors"]</div>
                    <div class="dropdown-divider"></div>
                    <div class="dropdown-item" onclick="movePendingToTop(); return false;">@{WriteLiteral(Model.Icon["sort-bool-descending-variant"]);} @Model.Language["checklist_move_pending_to_top"]</div>
                    <div class="dropdown-item" onclick="setCheckedStateForAll(false, false); return false;">@{WriteLiteral(Model.Icon["checkbox-multiple-blank-outline"]);} @Model.Language["checklist_uncheck_all"]</div>
                    <div class="dropdown-item" onclick="setCheckedStateForAll(true, false); return false;">@{WriteLiteral(Model.Icon["check-box-multiple-outline"]);} @Model.Language["checklist_check_all"]</div>
                    <div class="dropdown-item" onclick="setCheckedStateForAll(false, true); return false;">@{WriteLiteral(Model.Icon["checkbox-blank-off-outline"]);} @Model.Language["checklist_disable_all"]</div>
                    <div class="dropdown-divider"></div>
                    <div class="dropdown-item" v-bind:class="{ active: Header1Active }" onclick="toggleBlockFormat('header', 1);">@{WriteLiteral(Model.Icon["format-header-1"]);} @Model.Language["note_header1"]</div>
                    <div class="dropdown-item" v-bind:class="{ active: Header2Active }" onclick="toggleBlockFormat('header', 2);">@{WriteLiteral(Model.Icon["format-header-2"]);} @Model.Language["note_header2"]</div>
                    @if (Model.ShowManualSynchronization)
                    {
                        <div class="dropdown-divider"></div>
                        <div class="dropdown-item" v-on:click="PushNoteToOnlineStorageCommand">@{WriteLiteral(Model.Icon["cloud-upload"]);} @Model.Language["note_push_to_server"]</div>
                        <div class="dropdown-item" v-on:click="PullNoteFromOnlineStorageCommand">@{WriteLiteral(Model.Icon["cloud-download"]);} @Model.Language["note_pull_from_server"]</div>
                    }
                </div>
            </div>
        }
    </nav>

    <div id="content" v-bind:class="{ dark: IsDark }" v-bind:style="{ backgroundColor: BackgroundColorHex }">
        @if (Model.IsLocked)
        {
            <span class="locked d-flex justify-content-center align-items-center" v-bind:class="{ dark: IsDark }"><svg width='128' height='128' viewBox='0 0 24 24'><use xlink:href="#svg-lock-outline" /></svg></span>
        }
        else
        {
            <div id="myeditor" class="note-viewer detail-view @Model.CssClassNoteType">@{WriteLiteral(Model.UnlockedHtmlContent);}</div>
        }
    </div>

    <div id="tag-container" v-bind:class="{ dark: IsDark }">
        <div class="tag-input-group">
            <div class="input-group">
                <input id="tags" class="form-control" v-bind:disabled="ShoppingModeActive" placeholder='@Model.Language["tag_add"]' type="text">
                <div class="input-group-append">
                    <div id="add-tag" class="btn" onclick="addTag();"><svg width='16' height='16' viewBox='0 0 24 24'><use xlink:href="#svg-plus" /></svg></div>
                </div>
            </div>
        </div>
        <ul class="tag-list">
            <li class="tag-item" v-bind:style="{ backgroundColor: BackgroundColorHex }" v-for="Tag in Tags">
                {{Tag}}
                <div class="tag-handle" onclick="deleteTag(event);" v-bind:data-tag="Tag"><svg width='16' height='16' viewBox='0 0 24 24'><use xlink:href="#svg-delete" /></svg></div>
            </li>
        </ul>
    </div>

    <div id="search-dialog" class="hidden">
        <div class="nav-filter">
            <input id="TxtFilter" autocomplete="off" />
            <svg id="filter-cancel-icon" width='24' height='24' viewBox='0 0 24 24' class="" onclick="showSearchDialog(false);"><use xlink:href="#svg-close-circle-outline" /></svg>
        </div>
    </div>

    <div class="modal" id="colorPaletteModal" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-sm" role="document">
            <div class="modal-content p-2">
                <button type="button" class="close d-flex justify-content-end" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <div class="d-flex flex-wrap">
                    @foreach (var backgroundColor in @Model.BackgroundColorsHex)
                    {
                        <div class="d-flex align-items-center justify-content-center color-btn @Model.GetDarkClass(backgroundColor)" data-dismiss="modal" v-on:click="BackgroundColorHex='@(backgroundColor)'" style="background-color: @backgroundColor"><span>Lorem ipsum</span></div>
                    }
                </div>
            </div>
        </div>
    </div>

    <div hidden>
        @{WriteLiteral(Model.Icon.LoadIcon("lock-outline", new[] { new KeyValuePair<string, string>("id", "svg-lock-outline") }));}
        @{WriteLiteral(Model.Icon.LoadIcon("delete", new[] { new KeyValuePair<string, string>("id", "svg-delete") }));}
        @{WriteLiteral(Model.Icon.LoadIcon("close-circle-outline", new[] { new KeyValuePair<string, string>("id", "svg-close-circle-outline") }));}
        @{WriteLiteral(Model.Icon.LoadIcon("plus", new[] { new KeyValuePair<string, string>("id", "svg-plus") }));}
    </div>
</div></body>
</html>
