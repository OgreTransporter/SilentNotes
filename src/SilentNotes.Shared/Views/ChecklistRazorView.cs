#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SilentNotes.Views
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

#line 1 "ChecklistRazorView.cshtml"
using SilentNotes.ViewModels;

#line default
#line hidden


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "17.1.0.324")]
public partial class ChecklistRazorView : ChecklistRazorViewBase
{

#line hidden

#line 2 "ChecklistRazorView.cshtml"
public NoteViewModel Model { get; set; }

#line default
#line hidden


public override void Execute()
{
WriteLiteral("<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta");

WriteLiteral(" http-equiv=\"X-UA-Compatible\"");

WriteLiteral(" content=\"IE=edge\"");

WriteLiteral(" />\r\n    <base");

WriteAttribute ("href", " href=\"", "\""

#line 7 "ChecklistRazorView.cshtml"
, Tuple.Create<string,object,bool> ("", Model.HtmlBase

#line default
#line hidden
, false)
);
WriteLiteral(">\r\n    <title>SilentNotes</title>\r\n    <meta");

WriteLiteral(" charset=\"UTF-8\"");

WriteLiteral(" />\r\n    <meta");

WriteLiteral(" name=\"viewport\"");

WriteLiteral(" content=\"width=device-width, initial-scale=1, shrink-to-fit=no, user-scalable=no" +
"\"");

WriteLiteral(">\r\n\r\n    <link");

WriteLiteral(" href=\"bootstrap.min.css\"");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" />\r\n    <link");

WriteLiteral(" href=\"silentnotes.css\"");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" />\r\n    <link");

WriteAttribute ("href", " href=\"", "\""

#line 14 "ChecklistRazorView.cshtml"
, Tuple.Create<string,object,bool> ("", Model.Theme.DarkMode ? "silentnotes.dark.css" : "silentnotes.light.css"

#line default
#line hidden
, false)
);
WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" />\r\n\r\n    <script");

WriteAttribute ("src", " src=\"", "\""

#line 16 "ChecklistRazorView.cshtml"
, Tuple.Create<string,object,bool> ("", Model.HtmlRecource["vuejs"]

#line default
#line hidden
, false)
);
WriteLiteral("></script>\r\n    <script");

WriteAttribute ("src", " src=\"", "\""

#line 17 "ChecklistRazorView.cshtml"
, Tuple.Create<string,object,bool> ("", Model.HtmlRecource["jqueryjs"]

#line default
#line hidden
, false)
);
WriteLiteral("></script>\r\n    <script");

WriteAttribute ("src", " src=\"", "\""

#line 18 "ChecklistRazorView.cshtml"
, Tuple.Create<string,object,bool> ("", Model.HtmlRecource["bootstrapjs"]

#line default
#line hidden
, false)
);
WriteLiteral("></script>\r\n    <script");

WriteAttribute ("src", " src=\"", "\""

#line 19 "ChecklistRazorView.cshtml"
, Tuple.Create<string,object,bool> ("", Model.HtmlRecource["bootstrapautocompletejs"]

#line default
#line hidden
, false)
);
WriteLiteral("></script>\r\n    <script");

WriteAttribute ("src", " src=\"", "\""

#line 20 "ChecklistRazorView.cshtml"
, Tuple.Create<string,object,bool> ("", Model.HtmlRecource["prosemirror"]

#line default
#line hidden
, false)
);
WriteLiteral("></script>\r\n    <script");

WriteLiteral(" src=\"silentnotes.js\"");

WriteLiteral("></script>\r\n    <script");

WriteLiteral(" src=\"checklist.js\"");

WriteLiteral("></script>\r\n\r\n    <style");

WriteLiteral(" type=\"text/css\"");

WriteLiteral(">\r\nbody { background-color: transparent; }\r\n\r\n.note-viewer {\r\n    font-size: ");


#line 28 "ChecklistRazorView.cshtml"
           Write(Model.NoteBaseFontSize);


#line default
#line hidden
WriteLiteral("px !important;\r\n}\r\ndiv .detail-view.checklist .ProseMirror p::before { content: ");


#line 30 "ChecklistRazorView.cshtml"
                                                               WriteLiteral(Model.Icon.LoadIconAsCssUrl("checkbox-blank-outline", new[] { new KeyValuePair<string, string>("fill", "#000000") }));

#line default
#line hidden
WriteLiteral("; }\r\ndiv .detail-view.checklist .ProseMirror p.done::before { content: ");


#line 31 "ChecklistRazorView.cshtml"
                                                                    WriteLiteral(Model.Icon.LoadIconAsCssUrl("check-box-outline", new[] { new KeyValuePair<string, string>("fill", "#000000") }));

#line default
#line hidden
WriteLiteral("; }\r\ndiv .detail-view.checklist .ProseMirror p.disabled::before { content: ");


#line 32 "ChecklistRazorView.cshtml"
                                                                        WriteLiteral(Model.Icon.LoadIconAsCssUrl("checkbox-blank-outline", new[] { new KeyValuePair<string, string>("fill", "#000000") }));

#line default
#line hidden
WriteLiteral("; }\r\ndiv .detail-view.checklist .ProseMirror p::after { content: ");


#line 33 "ChecklistRazorView.cshtml"
                                                              WriteLiteral(Model.Icon.LoadIconAsCssUrl("delete", new[] { new KeyValuePair<string, string>("fill", "#000000") }));

#line default
#line hidden
WriteLiteral("; }\r\ndiv.dark .detail-view.checklist .ProseMirror p::before { content: ");


#line 34 "ChecklistRazorView.cshtml"
                                                                    WriteLiteral(Model.Icon.LoadIconAsCssUrl("checkbox-blank-outline", new[] { new KeyValuePair<string, string>("fill", "#FFFFFF") }));

#line default
#line hidden
WriteLiteral("; }\r\ndiv.dark .detail-view.checklist .ProseMirror p.done::before { content: ");


#line 35 "ChecklistRazorView.cshtml"
                                                                         WriteLiteral(Model.Icon.LoadIconAsCssUrl("check-box-outline", new[] { new KeyValuePair<string, string>("fill", "#FFFFFF") }));

#line default
#line hidden
WriteLiteral("; }\r\ndiv.dark .detail-view.checklist .ProseMirror p.disabled::before { content: ");


#line 36 "ChecklistRazorView.cshtml"
                                                                             WriteLiteral(Model.Icon.LoadIconAsCssUrl("checkbox-blank-outline", new[] { new KeyValuePair<string, string>("fill", "#FFFFFF") }));

#line default
#line hidden
WriteLiteral("; }\r\ndiv.dark .detail-view.checklist .ProseMirror p::after { content: ");


#line 37 "ChecklistRazorView.cshtml"
                                                                   WriteLiteral(Model.Icon.LoadIconAsCssUrl("delete", new[] { new KeyValuePair<string, string>("fill", "#FFFFFF") }));

#line default
#line hidden
WriteLiteral("; }\r\n\r\n.color-btn { color: black; }\r\n.color-btn.dark { color: white; }\r\n.locked {" +
"\r\n    position: relative;\r\n    height: 100%;\r\n}\r\n.locked svg {\r\n    fill: rgba(1" +
"60, 160, 160, 0.4);\r\n}\r\n    </style>\r\n    <script>\r\n        var editor;\r\n\r\n     " +
"   function getSearchDialogElement() {\r\n            return document.getElementBy" +
"Id(\'search-dialog\');\r\n        }\r\n\r\n        function getTagsElement() {\r\n        " +
"    return document.getElementById(\'tags\');\r\n        }\r\n\r\n        function toggl" +
"eFormat(formatName, formatParameter) {\r\n            switch (formatName) {\r\n     " +
"         case \'heading\':\r\n                editor.chain().focus().toggleHeading({" +
" level: formatParameter }).run(); break;\r\n              case \'codeblock\':\r\n     " +
"           editor.chain().focus().toggleCodeBlock().run(); break;\r\n             " +
" case \'blockquote\':\r\n                editor.chain().focus().toggleBlockquote().r" +
"un(); break;\r\n              case \'bulletlist\':\r\n                editor.chain().f" +
"ocus().toggleBulletList().run(); break;\r\n              case \'orderedlist\':\r\n    " +
"            editor.chain().focus().toggleOrderedList().run(); break;\r\n          " +
"    default:\r\n                editor.chain().focus().toggleMark(formatName).run(" +
"); break;\r\n            }\r\n            refreshActiveFormatState();\r\n        }\r\n\r\n" +
"        function refreshActiveFormatState() {\r\n            vm.Header1Active = ed" +
"itor.isActive(\'heading\', { level: 1 });\r\n            vm.Header2Active = editor.i" +
"sActive(\'heading\', { level: 2 });\r\n            vm.Header3Active = editor.isActiv" +
"e(\'heading\', { level: 3 });\r\n            vm.BoldActive = editor.isActive(\'bold\')" +
";\r\n            vm.ItalicActive = editor.isActive(\'italic\');\r\n            vm.Unde" +
"rlineActive = editor.isActive(\'underline\');\r\n            vm.StrikeActive = edito" +
"r.isActive(\'strike\');\r\n            vm.CodeActive = editor.isActive(\'codeblock\');" +
"\r\n            vm.QuoteActive = editor.isActive(\'blockquote\');\r\n            vm.Li" +
"stBulletActive = editor.isActive(\'bulletlist\');\r\n            vm.ListOrderedActiv" +
"e = editor.isActive(\'orderedlist\');\r\n        }\r\n\r\n        function addTag() {\r\n " +
"           var tagText = getTagsElement().value.trim();\r\n            if (vm.Shop" +
"pingModeActive || tagText === \'\')\r\n                return;\r\n            getTagsE" +
"lement().value = \'\';\r\n            vueCommandExecute(\'AddTagCommand\', tagText);\r\n" +
"        }\r\n\r\n        function deleteTag(e) {\r\n            if (vm.ShoppingModeAct" +
"ive)\r\n                return;\r\n            vueCommandExecute(\'DeleteTagCommand\'," +
" e.currentTarget.attributes[\'data-tag\'].value);\r\n        }\r\n\r\n        function g" +
"etTagSuggestions() {\r\n            return vm.$data.TagSuggestions.map(function (i" +
"tem) {\r\n                return { value: item }\r\n            });\r\n        }\r\n\r\n  " +
"      function getNoteHtmlContent() {\r\n            return \'\';\r\n        }\r\n\r\n    " +
"    // By setting the content after loading the page, we can avoid that the cont" +
"ent has to be\r\n        // declared statically as javascript and therefore would " +
"occupy memory twice.\r\n        function setNoteContent(text) {\r\n            edito" +
"r.commands.setContent(text);\r\n            ProseMirrorBundle.scrollToTop(editor);" +
"\r\n        }\r\n\r\n        function isSearchDialogHidden() {\r\n            return get" +
"SearchDialogElement().classList.contains(\'hidden\');\r\n        }\r\n\r\n        functi" +
"on toggleSearchDialog() {\r\n            showSearchDialog(isSearchDialogHidden());" +
"\r\n        }\r\n\r\n        function showSearchDialog(visible) {\r\n            if (vis" +
"ible) {\r\n                // Open dialog\r\n                var filter = ProseMirro" +
"rBundle.getSelectedText(editor);\r\n                if (filter) {\r\n               " +
"     vm.SearchPattern = filter.trim();\r\n                }\r\n                searc" +
"hByFilter();\r\n                getSearchDialogElement().classList.remove(\'hidden\'" +
");\r\n                document.getElementById(\'SearchPattern\').focus();\r\n         " +
"   }\r\n            else {\r\n                // Close dialog\r\n                vm.Se" +
"archPattern = \'\';\r\n                getSearchDialogElement().classList.add(\'hidde" +
"n\');\r\n                searchByFilter();\r\n            }\r\n        }\r\n\r\n        fun" +
"ction searchByFilter() {\r\n            ProseMirrorBundle.searchAndHighlight(edito" +
"r, vm.SearchPattern);\r\n        }\r\n\r\n        function toggleShoppingMode() {\r\n   " +
"         vm.ShoppingModeActive = !vm.ShoppingModeActive;\r\n            quill.enab" +
"le(!vm.ShoppingModeActive);\r\n        }\r\n\r\n        function vueLoaded() {\r\n      " +
"      var editorElement = document.getElementById(\'myeditor\');\r\n            edit" +
"or = ProseMirrorBundle.initializeEditor(editorElement);\r\n            editor.on(\'" +
"selectionUpdate\', function (editor) {\r\n                refreshActiveFormatState(" +
");\r\n            });\r\n            restoreCheckStates(checkStates);\r\n\r\n           " +
" ");

WriteLiteral(@"

            var searchPatternElement = document.getElementById('SearchPattern');
            searchPatternElement.addEventListener('input', function (event) {
                searchByFilter();
                ProseMirrorBundle.selectNextWhileTyping(editor);
            });

            //var noteContent = getNoteHtmlContent();
            //var noteIsNew = noteContent.length > 1 && noteContent.length < 42 && noteContent.replace(/<[^>]*>/g, '').trim().length == 0;
            //if (noteIsNew) {
            //    toggleBlockFormat('header', 1);
            //}

            //quill.enable(!vm.ShoppingModeActive);

            //$(""#tags"").autocomplete({
            //    source: getTagSuggestions,
            //    treshold: 0,
            //    maximumItems: 10,
            //    value: ""value"",
            //    label: ""value"",
            //    dropType: ""dropup"",
            //    onSelectItem: function (item, inputField) {
            //        addTag();
            //    },
            //});
            //document.getElementById('tags').addEventListener(""keyup"", function (event) {
            //    if (event.key === 'Enter' || event.keyCode === 13) {
            //        addTag();
            //    }
            //});
        };

");


#line 202 "ChecklistRazorView.cshtml"
        

#line default
#line hidden

#line 202 "ChecklistRazorView.cshtml"
          WriteLiteral(Model.VueDataBindingScript);

#line default
#line hidden
WriteLiteral("\r\n    </script>\r\n</head>\r\n<body><div");

WriteLiteral(" id=\"vueDataBinding\"");

WriteLiteral(">\r\n    <nav");

WriteLiteral(" id=\"navigation\"");

WriteLiteral(" class=\"d-flex\"");

WriteLiteral(">\r\n        <button");

WriteLiteral(" class=\"nav-item mr-auto\"");

WriteLiteral(" v-on:click=\"GoBackCommand\"");

WriteAttribute ("title", " title=\"", "\""

#line 207 "ChecklistRazorView.cshtml"
                                    , Tuple.Create<string,object,bool> ("", Model.Language["back"]

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 207 "ChecklistRazorView.cshtml"
                                                                                                      WriteLiteral(Model.Icon["arrow-left"]);

#line default
#line hidden
WriteLiteral("</button>\r\n\r\n");


#line 209 "ChecklistRazorView.cshtml"
        

#line default
#line hidden

#line 209 "ChecklistRazorView.cshtml"
         if (!Model.IsLocked)
        {
             


#line default
#line hidden
WriteLiteral("            <button");

WriteLiteral(" class=\"nav-item\"");

WriteLiteral(" onclick=\"moveUp(true); return false;\"");

WriteLiteral(" v-bind:disabled=\"ShoppingModeActive\"");

WriteAttribute ("title", " title=\"", "\""

#line 212 "ChecklistRazorView.cshtml"
                                                                                , Tuple.Create<string,object,bool> ("", Model.Language["checklist_move_to_top"]

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 212 "ChecklistRazorView.cshtml"
                                                                                                                                                                   WriteLiteral(Model.Icon["arrow-collapse-up"]);

#line default
#line hidden
WriteLiteral("</button>\r\n");

WriteLiteral("            <button");

WriteLiteral(" class=\"nav-item\"");

WriteLiteral(" onclick=\"moveUp(false); return false;\"");

WriteLiteral(" v-bind:disabled=\"ShoppingModeActive\"");

WriteAttribute ("title", " title=\"", "\""

#line 213 "ChecklistRazorView.cshtml"
                                                                                 , Tuple.Create<string,object,bool> ("", Model.Language["checklist_move_up"]

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 213 "ChecklistRazorView.cshtml"
                                                                                                                                                                WriteLiteral(Model.Icon["arrow-up"]);

#line default
#line hidden
WriteLiteral("</button>\r\n");

WriteLiteral("            <button");

WriteLiteral(" class=\"nav-item\"");

WriteLiteral(" onclick=\"moveDown(false); return false;\"");

WriteLiteral(" v-bind:disabled=\"ShoppingModeActive\"");

WriteAttribute ("title", " title=\"", "\""

#line 214 "ChecklistRazorView.cshtml"
                                                                                   , Tuple.Create<string,object,bool> ("", Model.Language["checklist_move_down"]

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 214 "ChecklistRazorView.cshtml"
                                                                                                                                                                    WriteLiteral(Model.Icon["arrow-down"]);

#line default
#line hidden
WriteLiteral("</button>\r\n");

WriteLiteral("            <button");

WriteLiteral(" class=\"nav-item\"");

WriteLiteral(" onclick=\"moveDown(true); return false;\"");

WriteLiteral(" v-bind:disabled=\"ShoppingModeActive\"");

WriteAttribute ("title", " title=\"", "\""

#line 215 "ChecklistRazorView.cshtml"
                                                                                  , Tuple.Create<string,object,bool> ("", Model.Language["checklist_move_to_bottom"]

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 215 "ChecklistRazorView.cshtml"
                                                                                                                                                                        WriteLiteral(Model.Icon["arrow-collapse-down"]);

#line default
#line hidden
WriteLiteral("</button>\r\n");

WriteLiteral("            <button");

WriteLiteral(" class=\"nav-item\"");

WriteLiteral(" onclick=\"toggleShoppingMode(); return false;\"");

WriteLiteral(" v-bind:class=\"{ active: ShoppingModeActive }\"");

WriteAttribute ("title", " title=\"", "\""

#line 216 "ChecklistRazorView.cshtml"
                                                                                                 , Tuple.Create<string,object,bool> ("", Model.Language["note_shopping_mode"]

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 216 "ChecklistRazorView.cshtml"
                                                                                                                                                                                 WriteLiteral(Model.Icon["keyboard_off_outline"]);

#line default
#line hidden
WriteLiteral("</button>\r\n");

WriteLiteral("            <button");

WriteLiteral(" class=\"nav-item\"");

WriteLiteral(" v-on:click=\"TogglePinnedCommand\"");

WriteLiteral(" v-bind:class=\"{ active: IsPinned }\"");

WriteLiteral(" v-bind:disabled=\"ShoppingModeActive\"");

WriteAttribute ("title", " title=\"", "\""

#line 217 "ChecklistRazorView.cshtml"
                                                                                                               , Tuple.Create<string,object,bool> ("", Model.Language["note_pin"]

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 217 "ChecklistRazorView.cshtml"
                                                                                                                                                                                     WriteLiteral(Model.Icon["pin"]);

#line default
#line hidden
WriteLiteral("</button> \r\n");

WriteLiteral("            <button");

WriteLiteral(" class=\"nav-item\"");

WriteLiteral(" onclick=\"toggleSearchDialog(); return false;\"");

WriteAttribute ("title", " title=\"", "\""

#line 218 "ChecklistRazorView.cshtml"
                                                   , Tuple.Create<string,object,bool> ("", Model.Language["search"]

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 218 "ChecklistRazorView.cshtml"
                                                                                                                       WriteLiteral(Model.Icon["magnify"]);

#line default
#line hidden
WriteLiteral("</button>\r\n");


#line 219 "ChecklistRazorView.cshtml"



#line default
#line hidden
WriteLiteral("            <div");

WriteLiteral(" class=\"dropdown\"");

WriteLiteral(">\r\n                <button");

WriteLiteral(" class=\"nav-item\"");

WriteLiteral(" id=\"navOverflowMenu\"");

WriteLiteral(" data-toggle=\"dropdown\"");

WriteLiteral(" aria-haspopup=\"true\"");

WriteLiteral(" aria-expanded=\"false\"");

WriteLiteral(" v-bind:disabled=\"ShoppingModeActive\"");

WriteLiteral(">\r\n");


#line 222 "ChecklistRazorView.cshtml"
                    

#line default
#line hidden

#line 222 "ChecklistRazorView.cshtml"
                      WriteLiteral(Model.Icon["dots-vertical"]);

#line default
#line hidden
WriteLiteral("\r\n                </button>\r\n                <div");

WriteLiteral(" class=\"dropdown-menu dropdown-menu-right\"");

WriteLiteral(" aria-labelledby=\"navOverflowMenu\"");

WriteLiteral(">\r\n                    <div");

WriteLiteral(" class=\"dropdown-item\"");

WriteLiteral(" data-toggle=\"modal\"");

WriteLiteral(" data-target=\"#colorPaletteModal\"");

WriteLiteral(">");


#line 225 "ChecklistRazorView.cshtml"
                                                                                                      WriteLiteral(Model.Icon["palette"]);

#line default
#line hidden
WriteLiteral(" ");


#line 225 "ChecklistRazorView.cshtml"
                                                                                                                                       Write(Model.Language["note_colors"]);


#line default
#line hidden
WriteLiteral("</div>\r\n                    <div");

WriteLiteral(" class=\"dropdown-divider\"");

WriteLiteral("></div>\r\n                    <div");

WriteLiteral(" class=\"dropdown-item\"");

WriteLiteral(" onclick=\"movePendingToTop(); return false;\"");

WriteLiteral(">");


#line 227 "ChecklistRazorView.cshtml"
                                                                                             WriteLiteral(Model.Icon["sort-bool-descending-variant"]);

#line default
#line hidden
WriteLiteral(" ");


#line 227 "ChecklistRazorView.cshtml"
                                                                                                                                                   Write(Model.Language["checklist_move_pending_to_top"]);


#line default
#line hidden
WriteLiteral("</div>\r\n                    <div");

WriteLiteral(" class=\"dropdown-item\"");

WriteLiteral(" onclick=\"setCheckedStateForAll(false, false); return false;\"");

WriteLiteral(">");


#line 228 "ChecklistRazorView.cshtml"
                                                                                                              WriteLiteral(Model.Icon["checkbox-multiple-blank-outline"]);

#line default
#line hidden
WriteLiteral(" ");


#line 228 "ChecklistRazorView.cshtml"
                                                                                                                                                                       Write(Model.Language["checklist_uncheck_all"]);


#line default
#line hidden
WriteLiteral("</div>\r\n                    <div");

WriteLiteral(" class=\"dropdown-item\"");

WriteLiteral(" onclick=\"setCheckedStateForAll(true, false); return false;\"");

WriteLiteral(">");


#line 229 "ChecklistRazorView.cshtml"
                                                                                                             WriteLiteral(Model.Icon["check-box-multiple-outline"]);

#line default
#line hidden
WriteLiteral(" ");


#line 229 "ChecklistRazorView.cshtml"
                                                                                                                                                                 Write(Model.Language["checklist_check_all"]);


#line default
#line hidden
WriteLiteral("</div>\r\n                    <div");

WriteLiteral(" class=\"dropdown-item\"");

WriteLiteral(" onclick=\"setCheckedStateForAll(false, true); return false;\"");

WriteLiteral(">");


#line 230 "ChecklistRazorView.cshtml"
                                                                                                             WriteLiteral(Model.Icon["checkbox-blank-off-outline"]);

#line default
#line hidden
WriteLiteral(" ");


#line 230 "ChecklistRazorView.cshtml"
                                                                                                                                                                 Write(Model.Language["checklist_disable_all"]);


#line default
#line hidden
WriteLiteral("</div>\r\n                    <div");

WriteLiteral(" class=\"dropdown-divider\"");

WriteLiteral("></div>\r\n                    <div");

WriteLiteral(" class=\"dropdown-item\"");

WriteLiteral(" v-bind:class=\"{ active: Header1Active }\"");

WriteLiteral(" onclick=\"toggleFormat(\'heading\', 1);\"");

WriteLiteral(">");


#line 232 "ChecklistRazorView.cshtml"
                                                                                                                                WriteLiteral(Model.Icon["format-header-1"]);

#line default
#line hidden
WriteLiteral(" ");


#line 232 "ChecklistRazorView.cshtml"
                                                                                                                                                                         Write(Model.Language["note_header1"]);


#line default
#line hidden
WriteLiteral("</div>\r\n                    <div");

WriteLiteral(" class=\"dropdown-item\"");

WriteLiteral(" v-bind:class=\"{ active: Header2Active }\"");

WriteLiteral(" onclick=\"toggleFormat(\'heading\', 2);\"");

WriteLiteral(">");


#line 233 "ChecklistRazorView.cshtml"
                                                                                                                                WriteLiteral(Model.Icon["format-header-2"]);

#line default
#line hidden
WriteLiteral(" ");


#line 233 "ChecklistRazorView.cshtml"
                                                                                                                                                                         Write(Model.Language["note_header2"]);


#line default
#line hidden
WriteLiteral("</div>\r\n");


#line 234 "ChecklistRazorView.cshtml"
                    

#line default
#line hidden

#line 234 "ChecklistRazorView.cshtml"
                     if (Model.ShowManualSynchronization)
                    {


#line default
#line hidden
WriteLiteral("                        <div");

WriteLiteral(" class=\"dropdown-divider\"");

WriteLiteral("></div>\r\n");

WriteLiteral("                        <div");

WriteLiteral(" class=\"dropdown-item\"");

WriteLiteral(" v-on:click=\"PushNoteToOnlineStorageCommand\"");

WriteLiteral(">");


#line 237 "ChecklistRazorView.cshtml"
                                                                                                 WriteLiteral(Model.Icon["cloud-upload"]);

#line default
#line hidden
WriteLiteral(" ");


#line 237 "ChecklistRazorView.cshtml"
                                                                                                                                       Write(Model.Language["note_push_to_server"]);


#line default
#line hidden
WriteLiteral("</div>\r\n");

WriteLiteral("                        <div");

WriteLiteral(" class=\"dropdown-item\"");

WriteLiteral(" v-on:click=\"PullNoteFromOnlineStorageCommand\"");

WriteLiteral(">");


#line 238 "ChecklistRazorView.cshtml"
                                                                                                   WriteLiteral(Model.Icon["cloud-download"]);

#line default
#line hidden
WriteLiteral(" ");


#line 238 "ChecklistRazorView.cshtml"
                                                                                                                                           Write(Model.Language["note_pull_from_server"]);


#line default
#line hidden
WriteLiteral("</div>\r\n");


#line 239 "ChecklistRazorView.cshtml"
                    }


#line default
#line hidden
WriteLiteral("                </div>\r\n            </div>\r\n");


#line 242 "ChecklistRazorView.cshtml"
        }


#line default
#line hidden
WriteLiteral("    </nav>\r\n\r\n    <div");

WriteLiteral(" id=\"content\"");

WriteLiteral(" v-bind:class=\"{ dark: IsDark }\"");

WriteLiteral(" v-bind:style=\"{ backgroundColor: BackgroundColorHex }\"");

WriteLiteral(">\r\n");


#line 246 "ChecklistRazorView.cshtml"
        

#line default
#line hidden

#line 246 "ChecklistRazorView.cshtml"
         if (Model.IsLocked)
        {


#line default
#line hidden
WriteLiteral("            <span");

WriteLiteral(" class=\"locked d-flex justify-content-center align-items-center\"");

WriteLiteral(" v-bind:class=\"{ dark: IsDark }\"");

WriteLiteral("><svg");

WriteLiteral(" width=\'128\'");

WriteLiteral(" height=\'128\'");

WriteLiteral(" viewBox=\'0 0 24 24\'");

WriteLiteral("><use");

WriteLiteral(" xlink:href=\"#svg-lock-outline\"");

WriteLiteral(" /></svg></span>\r\n");


#line 249 "ChecklistRazorView.cshtml"
        }
        else
        {


#line default
#line hidden
WriteLiteral("            <div");

WriteLiteral(" id=\"myeditor\"");

WriteAttribute ("class", " class=\"", "\""
, Tuple.Create<string,object,bool> ("", "note-viewer", true)
, Tuple.Create<string,object,bool> (" ", "detail-view", true)

#line 252 "ChecklistRazorView.cshtml"
                      , Tuple.Create<string,object,bool> (" ", Model.CssClassNoteType

#line default
#line hidden
, false)
);
WriteLiteral("></div>\r\n");


#line 253 "ChecklistRazorView.cshtml"
        }


#line default
#line hidden
WriteLiteral("    </div>\r\n\r\n    <div");

WriteLiteral(" id=\"tag-container\"");

WriteLiteral(" v-bind:class=\"{ dark: IsDark }\"");

WriteLiteral(">\r\n        <div");

WriteLiteral(" class=\"tag-input-group\"");

WriteLiteral(">\r\n            <div");

WriteLiteral(" class=\"input-group\"");

WriteLiteral(">\r\n                <input");

WriteLiteral(" id=\"tags\"");

WriteLiteral(" class=\"form-control\"");

WriteLiteral(" v-bind:disabled=\"ShoppingModeActive\"");

WriteAttribute ("placeholder", " placeholder=\'", "\'"

#line 259 "ChecklistRazorView.cshtml"
                                                                 , Tuple.Create<string,object,bool> ("", Model.Language["tag_add"]

#line default
#line hidden
, false)
);
WriteLiteral(" type=\"text\"");

WriteLiteral(">\r\n                <div");

WriteLiteral(" class=\"input-group-append\"");

WriteLiteral(">\r\n                    <div");

WriteLiteral(" id=\"add-tag\"");

WriteLiteral(" class=\"btn\"");

WriteLiteral(" onclick=\"addTag();\"");

WriteLiteral("><svg");

WriteLiteral(" width=\'16\'");

WriteLiteral(" height=\'16\'");

WriteLiteral(" viewBox=\'0 0 24 24\'");

WriteLiteral("><use");

WriteLiteral(" xlink:href=\"#svg-plus\"");

WriteLiteral(" /></svg></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    " +
"    <ul");

WriteLiteral(" class=\"tag-list\"");

WriteLiteral(">\r\n            <li");

WriteLiteral(" class=\"tag-item\"");

WriteLiteral(" v-bind:style=\"{ backgroundColor: BackgroundColorHex }\"");

WriteLiteral(" v-for=\"Tag in Tags\"");

WriteLiteral(">\r\n                {{Tag}}\r\n                <div");

WriteLiteral(" class=\"tag-handle\"");

WriteLiteral(" onclick=\"deleteTag(event);\"");

WriteLiteral(" v-bind:data-tag=\"Tag\"");

WriteLiteral("><svg");

WriteLiteral(" width=\'16\'");

WriteLiteral(" height=\'16\'");

WriteLiteral(" viewBox=\'0 0 24 24\'");

WriteLiteral("><use");

WriteLiteral(" xlink:href=\"#svg-delete\"");

WriteLiteral(" /></svg></div>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n\r\n    <div");

WriteLiteral(" id=\"search-dialog\"");

WriteLiteral(" class=\"hidden\"");

WriteLiteral(">\r\n        <div");

WriteLiteral(" class=\"nav-filter\"");

WriteLiteral(">\r\n            <input");

WriteLiteral(" id=\"SearchPattern\"");

WriteLiteral(" v-model=\"SearchPattern\"");

WriteLiteral(" autocomplete=\"off\"");

WriteLiteral(" />\r\n            <svg");

WriteLiteral(" id=\"search-next\"");

WriteLiteral(" width=\'24\'");

WriteLiteral(" height=\'24\'");

WriteLiteral(" viewBox=\'0 0 24 24\'");

WriteLiteral(" class=\"\"");

WriteLiteral(" v-on:click=\"FindNextCommand\"");

WriteLiteral("><use");

WriteLiteral(" xlink:href=\"#svg-chevron-down\"");

WriteLiteral(" /></svg>\r\n            <svg");

WriteLiteral(" id=\"search-previous\"");

WriteLiteral(" width=\'24\'");

WriteLiteral(" height=\'24\'");

WriteLiteral(" viewBox=\'0 0 24 24\'");

WriteLiteral(" class=\"\"");

WriteLiteral(" v-on:click=\"FindPreviousCommand\"");

WriteLiteral("><use");

WriteLiteral(" xlink:href=\"#svg-chevron-up\"");

WriteLiteral(" /></svg>\r\n            <svg");

WriteLiteral(" id=\"filter-cancel-icon\"");

WriteLiteral(" width=\'24\'");

WriteLiteral(" height=\'24\'");

WriteLiteral(" viewBox=\'0 0 24 24\'");

WriteLiteral(" class=\"\"");

WriteLiteral(" onclick=\"showSearchDialog(false);\"");

WriteLiteral("><use");

WriteLiteral(" xlink:href=\"#svg-close-circle-outline\"");

WriteLiteral(" /></svg>\r\n        </div>\r\n    </div>\r\n\r\n    <div");

WriteLiteral(" class=\"modal\"");

WriteLiteral(" id=\"colorPaletteModal\"");

WriteLiteral(" tabindex=\"-1\"");

WriteLiteral(" role=\"dialog\"");

WriteLiteral(" aria-hidden=\"true\"");

WriteLiteral(">\r\n        <div");

WriteLiteral(" class=\"modal-dialog modal-sm\"");

WriteLiteral(" role=\"document\"");

WriteLiteral(">\r\n            <div");

WriteLiteral(" class=\"modal-content p-2\"");

WriteLiteral(">\r\n                <button");

WriteLiteral(" type=\"button\"");

WriteLiteral(" class=\"close d-flex justify-content-end\"");

WriteLiteral(" data-dismiss=\"modal\"");

WriteLiteral(" aria-label=\"Close\"");

WriteLiteral(">\r\n                    <span");

WriteLiteral(" aria-hidden=\"true\"");

WriteLiteral(">&times;</span>\r\n                </button>\r\n                <div");

WriteLiteral(" class=\"d-flex flex-wrap\"");

WriteLiteral(">\r\n");


#line 289 "ChecklistRazorView.cshtml"
                    

#line default
#line hidden

#line 289 "ChecklistRazorView.cshtml"
                     foreach (var backgroundColor in @Model.BackgroundColorsHex)
                    {


#line default
#line hidden
WriteLiteral("                        <div");

WriteAttribute ("class", " class=\"", "\""
, Tuple.Create<string,object,bool> ("", "d-flex", true)
, Tuple.Create<string,object,bool> (" ", "align-items-center", true)
, Tuple.Create<string,object,bool> (" ", "justify-content-center", true)
, Tuple.Create<string,object,bool> (" ", "color-btn", true)

#line 291 "ChecklistRazorView.cshtml"
                                                       , Tuple.Create<string,object,bool> (" ", Model.GetDarkClass(backgroundColor)

#line default
#line hidden
, false)
);
WriteLiteral(" data-dismiss=\"modal\"");

WriteAttribute ("v-on:click", " v-on:click=\"", "\""
, Tuple.Create<string,object,bool> ("", "BackgroundColorHex=\'", true)

#line 291 "ChecklistRazorView.cshtml"
                                                                                                                                                    , Tuple.Create<string,object,bool> ("", backgroundColor

#line default
#line hidden
, false)
, Tuple.Create<string,object,bool> ("", "\'", true)
);
WriteAttribute ("style", " style=\"", "\""
, Tuple.Create<string,object,bool> ("", "background-color:", true)

#line 291 "ChecklistRazorView.cshtml"
                                                                                                                                                                                                , Tuple.Create<string,object,bool> (" ", backgroundColor

#line default
#line hidden
, false)
);
WriteLiteral("><span>Lorem ipsum</span></div>\r\n");


#line 292 "ChecklistRazorView.cshtml"
                    }


#line default
#line hidden
WriteLiteral("                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <di" +
"v hidden>\r\n");


#line 299 "ChecklistRazorView.cshtml"
        

#line default
#line hidden

#line 299 "ChecklistRazorView.cshtml"
          WriteLiteral(Model.Icon.LoadIcon("lock-outline", new[] { new KeyValuePair<string, string>("id", "svg-lock-outline") }));

#line default
#line hidden
WriteLiteral("\r\n");


#line 300 "ChecklistRazorView.cshtml"
        

#line default
#line hidden

#line 300 "ChecklistRazorView.cshtml"
          WriteLiteral(Model.Icon.LoadIcon("delete", new[] { new KeyValuePair<string, string>("id", "svg-delete") }));

#line default
#line hidden
WriteLiteral("\r\n");


#line 301 "ChecklistRazorView.cshtml"
        

#line default
#line hidden

#line 301 "ChecklistRazorView.cshtml"
          WriteLiteral(Model.Icon.LoadIcon("close-circle-outline", new[] { new KeyValuePair<string, string>("id", "svg-close-circle-outline") }));

#line default
#line hidden
WriteLiteral("\r\n");


#line 302 "ChecklistRazorView.cshtml"
        

#line default
#line hidden

#line 302 "ChecklistRazorView.cshtml"
          WriteLiteral(Model.Icon.LoadIcon("plus", new[] { new KeyValuePair<string, string>("id", "svg-plus") }));

#line default
#line hidden
WriteLiteral("\r\n");


#line 303 "ChecklistRazorView.cshtml"
        

#line default
#line hidden

#line 303 "ChecklistRazorView.cshtml"
          WriteLiteral(Model.Icon.LoadIcon("chevron-up", new[] { new KeyValuePair<string, string>("id", "svg-chevron-up") }));

#line default
#line hidden
WriteLiteral("\r\n");


#line 304 "ChecklistRazorView.cshtml"
        

#line default
#line hidden

#line 304 "ChecklistRazorView.cshtml"
          WriteLiteral(Model.Icon.LoadIcon("chevron-down", new[] { new KeyValuePair<string, string>("id", "svg-chevron-down") }));

#line default
#line hidden
WriteLiteral("\r\n    </div>\r\n</div></body>\r\n</html>\r\n");

}
}

// NOTE: this is the default generated helper class. You may choose to extract it to a separate file 
// in order to customize it or share it between multiple templates, and specify the template's base 
// class via the @inherits directive.
public abstract class ChecklistRazorViewBase
{

		// This field is OPTIONAL, but used by the default implementation of Generate, Write, WriteAttribute and WriteLiteral
		//
		System.IO.TextWriter __razor_writer;

		// This method is OPTIONAL
		//
		/// <summary>Executes the template and returns the output as a string.</summary>
		/// <returns>The template output.</returns>
		public string GenerateString ()
		{
			using (var sw = new System.IO.StringWriter ()) {
				Generate (sw);
				return sw.ToString ();
			}
		}

		// This method is OPTIONAL, you may choose to implement Write and WriteLiteral without use of __razor_writer
		// and provide another means of invoking Execute.
		//
		/// <summary>Executes the template, writing to the provided text writer.</summary>
		/// <param name="writer">The TextWriter to which to write the template output.</param>
		public void Generate (System.IO.TextWriter writer)
		{
			__razor_writer = writer;
			Execute ();
			__razor_writer = null;
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the template output without HTML escaping it.</summary>
		/// <param name="value">The literal value.</param>
		protected void WriteLiteral (string value)
		{
			__razor_writer.Write (value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the TextWriter without HTML escaping it.</summary>
		/// <param name="writer">The TextWriter to which to write the literal.</param>
		/// <param name="value">The literal value.</param>
		protected static void WriteLiteralTo (System.IO.TextWriter writer, string value)
		{
			writer.Write (value);
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a value to the template output, HTML escaping it if necessary.</summary>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected void Write (object value)
		{
			WriteTo (__razor_writer, value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes an object value to the TextWriter, HTML escaping it if necessary.</summary>
		/// <param name="writer">The TextWriter to which to write the value.</param>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected static void WriteTo (System.IO.TextWriter writer, object value)
		{
			if (value == null)
				return;

			var write = value as Action<System.IO.TextWriter>;
			if (write != null) {
				write (writer);
				return;
			}

			//NOTE: a more sophisticated implementation would write safe and pre-escaped values directly to the
			//instead of double-escaping. See System.Web.IHtmlString in ASP.NET 4.0 for an example of this.
			writer.Write(System.Net.WebUtility.HtmlEncode (value.ToString ()));
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to the template output.
		/// </summary>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		protected void WriteAttribute (string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			WriteAttributeTo (__razor_writer, name, prefix, suffix, values);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to a TextWriter.
		/// </summary>
		/// <param name="writer">The TextWriter to which to write the attribute.</param>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		///<remarks>Used by Razor helpers to write attributes.</remarks>
		protected static void WriteAttributeTo (System.IO.TextWriter writer, string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			// this is based on System.Web.WebPages.WebPageExecutingBase
			// Copyright (c) Microsoft Open Technologies, Inc.
			// Licensed under the Apache License, Version 2.0
			if (values.Length == 0) {
				// Explicitly empty attribute, so write the prefix and suffix
				writer.Write (prefix);
				writer.Write (suffix);
				return;
			}

			bool first = true;
			bool wroteSomething = false;

			for (int i = 0; i < values.Length; i++) {
				Tuple<string,object,bool> attrVal = values [i];
				string attPrefix = attrVal.Item1;
				object value = attrVal.Item2;
				bool isLiteral = attrVal.Item3;

				if (value == null) {
					// Nothing to write
					continue;
				}

				// The special cases here are that the value we're writing might already be a string, or that the
				// value might be a bool. If the value is the bool 'true' we want to write the attribute name instead
				// of the string 'true'. If the value is the bool 'false' we don't want to write anything.
				//
				// Otherwise the value is another object (perhaps an IHtmlString), and we'll ask it to format itself.
				string stringValue;
				bool? boolValue = value as bool?;
				if (boolValue == true) {
					stringValue = name;
				} else if (boolValue == false) {
					continue;
				} else {
					stringValue = value as string;
				}

				if (first) {
					writer.Write (prefix);
					first = false;
				} else {
					writer.Write (attPrefix);
				}

				if (isLiteral) {
					writer.Write (stringValue ?? value);
				} else {
					WriteTo (writer, stringValue ?? value);
				}
				wroteSomething = true;
			}
			if (wroteSomething) {
				writer.Write (suffix);
			}
		}
		// This method is REQUIRED. The generated Razor subclass will override it with the generated code.
		//
		///<summary>Executes the template, writing output to the Write and WriteLiteral methods.</summary>.
		///<remarks>Not intended to be called directly. Call the Generate method instead.</remarks>
		public abstract void Execute ();

}
}
#pragma warning restore 1591
