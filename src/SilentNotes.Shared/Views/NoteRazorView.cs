#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SilentNotes.Views
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

#line 1 "NoteRazorView.cshtml"
using SilentNotes.ViewModels;

#line default
#line hidden


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "17.1.0.309")]
public partial class NoteRazorView : NoteRazorViewBase
{

#line hidden

#line 2 "NoteRazorView.cshtml"
public NoteViewModel Model { get; set; }

#line default
#line hidden


public override void Execute()
{
WriteLiteral("<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta");

WriteLiteral(" http-equiv=\"X-UA-Compatible\"");

WriteLiteral(" content=\"IE=edge\"");

WriteLiteral(" />\r\n    <base");

WriteAttribute ("href", " href=\"", "\""

#line 7 "NoteRazorView.cshtml"
, Tuple.Create<string,object,bool> ("", Model.HtmlBase

#line default
#line hidden
, false)
);
WriteLiteral(">\r\n    <title>SilentNotes</title>\r\n    <meta");

WriteLiteral(" charset=\"UTF-8\"");

WriteLiteral(" />\r\n    <meta");

WriteLiteral(" name=\"viewport\"");

WriteLiteral(" content=\"width=device-width, initial-scale=1, shrink-to-fit=no, user-scalable=no" +
"\"");

WriteLiteral(">\r\n\r\n    <link");

WriteLiteral(" href=\"bootstrap.min.css\"");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" />\r\n    <link");

WriteLiteral(" href=\"silentnotes.css\"");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" />\r\n    <link");

WriteAttribute ("href", " href=\"", "\""

#line 14 "NoteRazorView.cshtml"
, Tuple.Create<string,object,bool> ("", Model.Theme.DarkMode ? "silentnotes.dark.css" : "silentnotes.light.css"

#line default
#line hidden
, false)
);
WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" />\r\n\r\n    <link");

WriteLiteral(" href=\"note-view.css\"");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(">\r\n\r\n    <script");

WriteAttribute ("src", " src=\"", "\""

#line 18 "NoteRazorView.cshtml"
, Tuple.Create<string,object,bool> ("", Model.HtmlRecource["vuejs"]

#line default
#line hidden
, false)
);
WriteLiteral("></script>\r\n    <script");

WriteAttribute ("src", " src=\"", "\""

#line 19 "NoteRazorView.cshtml"
, Tuple.Create<string,object,bool> ("", Model.HtmlRecource["jqueryjs"]

#line default
#line hidden
, false)
);
WriteLiteral("></script>\r\n    <script");

WriteAttribute ("src", " src=\"", "\""

#line 20 "NoteRazorView.cshtml"
, Tuple.Create<string,object,bool> ("", Model.HtmlRecource["bootstrapjs"]

#line default
#line hidden
, false)
);
WriteLiteral("></script>\r\n    <script");

WriteAttribute ("src", " src=\"", "\""

#line 21 "NoteRazorView.cshtml"
, Tuple.Create<string,object,bool> ("", Model.HtmlRecource["bootstrapautocompletejs"]

#line default
#line hidden
, false)
);
WriteLiteral("></script>\r\n    <script");

WriteAttribute ("src", " src=\"", "\""

#line 22 "NoteRazorView.cshtml"
, Tuple.Create<string,object,bool> ("", Model.HtmlRecource["prosemirror"]

#line default
#line hidden
, false)
);
WriteLiteral("></script>\r\n    <script");

WriteLiteral(" src=\"silentnotes.js\"");

WriteLiteral("></script>\r\n\r\n    <style");

WriteLiteral(" type=\"text/css\"");

WriteLiteral(">\r\nbody { background-color: transparent; }\r\n\r\ndiv.ProseMirror {\r\n\tborder: none 0;" +
"\r\n    font-size: ");


#line 30 "NoteRazorView.cshtml"
           Write(Model.NoteBaseFontSize);


#line default
#line hidden
WriteLiteral("px !important;\r\n}\r\ndiv.ProseMirror:focus {\r\n    outline: none;\r\n}\r\ndiv.ProseMirro" +
"r li p {\r\n    display: inline-block;\r\n}\r\n\r\n.color-btn { color: black; }\r\n.color-" +
"btn.dark { color: white; }\r\n.locked {\r\n    position: relative;\r\n    height: 100%" +
";\r\n}\r\n.locked svg {\r\n    fill: rgba(160, 160, 160, 0.4);\r\n}\r\n    </style>\r\n    <" +
"script>\r\n        var editor;\r\n\r\n        function toggleFormat(formatName, format" +
"Parameter) {\r\n            switch (formatName) {\r\n              case \'header\':\r\n " +
"               editor.chain().focus().toggleHeading({ level: formatParameter })." +
"run(); break;\r\n              case \'bold\':\r\n                editor.chain().focus(" +
").toggleBold().run(); break;\r\n              case \'italic\':\r\n                edit" +
"or.chain().focus().toggleItalic().run(); break;\r\n              case \'underline\':" +
"\r\n                editor.chain().focus().toggleUnderline().run(); break;\r\n      " +
"        case \'strike\':\r\n                editor.chain().focus().toggleStrike().ru" +
"n(); break;\r\n              case \'code-block\':\r\n                editor.chain().fo" +
"cus().toggleCodeBlock().run(); break;\r\n              case \'blockquote\':\r\n       " +
"         editor.chain().focus().toggleBlockquote().run(); break;\r\n              " +
"case \'bullet-list\':\r\n                editor.chain().focus().toggleBulletList().r" +
"un(); break;\r\n              case \'ordered-list\':\r\n                editor.chain()" +
".focus().toggleOrderedList().run(); break;\r\n            }\r\n            refreshAc" +
"tiveFormatState();\r\n        }\r\n\r\n        function refreshActiveFormatState() {\r\n" +
"            vm.Header1Active = editor.isActive(\'heading\', { level: 1 });\r\n      " +
"      vm.Header2Active = editor.isActive(\'heading\', { level: 2 });\r\n            " +
"vm.Header3Active = editor.isActive(\'heading\', { level: 3 });\r\n            vm.Bol" +
"dActive = editor.isActive(\'bold\');\r\n            vm.ItalicActive = editor.isActiv" +
"e(\'italic\');\r\n            vm.UnderlineActive = editor.isActive(\'underline\');\r\n  " +
"          vm.StrikeActive = editor.isActive(\'strike\');\r\n            vm.CodeActiv" +
"e = editor.isActive(\'codeBlock\');\r\n            vm.QuoteActive = editor.isActive(" +
"\'blockquote\');\r\n            vm.ListBulletActive = editor.isActive(\'bulletList\');" +
"\r\n            vm.ListOrderedActive = editor.isActive(\'orderedList\');\r\n        }\r" +
"\n\r\n        function linkDialogShow() {\r\n            vm.EditLinkUrl = editor.getA" +
"ttributes(\'link\').href;\r\n            var dialog = new bootstrap.Modal(document.g" +
"etElementById(\'editLinkModal\'));\r\n            dialog.show();\r\n        }\r\n\r\n     " +
"   function linkDialogOpenPressed()\r\n        {\r\n            location.href = vm.E" +
"ditLinkUrl;\r\n        }\r\n\r\n        function linkDialogOkPressed()\r\n        {\r\n   " +
"         var oldUrl = editor.getAttributes(\'link\').href;\r\n            var url = " +
"vm.EditLinkUrl;\r\n            if (url == oldUrl)\r\n                return;\r\n\r\n    " +
"        var commandChain = editor.chain().focus().extendMarkRange(\'link\').setLin" +
"k({ href: url });\r\n            var selection = editor.view.state.selection;\r\n   " +
"         if (!selection.empty)\r\n                commandChain.setTextSelection(se" +
"lection.to);\r\n            commandChain.run();\r\n        }\r\n\r\n        function lin" +
"kDialogRemovePressed()\r\n        {\r\n            var commandChain = editor.chain()" +
".focus().extendMarkRange(\'link\').unsetLink().run();\r\n            var selection =" +
" editor.view.state.selection;\r\n            if (!selection.empty)\r\n              " +
"  editor.setTextSelection(selection.to);\r\n        }\r\n\r\n        function addTag()" +
" {\r\n            var tagText = document.getElementById(\'tags\').value.trim();\r\n   " +
"         if (vm.ShoppingModeActive || tagText === \'\')\r\n                return;\r\n" +
"            document.getElementById(\'tags\').value = \'\';\r\n            vueCommandE" +
"xecute(\'AddTagCommand\', tagText);\r\n        }\r\n\r\n        function deleteTag(e) {\r" +
"\n            if (vm.ShoppingModeActive)\r\n                return;\r\n            vu" +
"eCommandExecute(\'DeleteTagCommand\', e.currentTarget.attributes[\'data-tag\'].value" +
");\r\n        }\r\n\r\n        function getTagSuggestions() {\r\n            return vm.$" +
"data.TagSuggestions.map(function (item) {\r\n                return { value: item " +
"}\r\n            });\r\n        }\r\n\r\n        function getNoteHtmlContent() {\r\n      " +
"      return \'\';\r\n        }\r\n\r\n        function setNoteHtmlContent(text) {\r\n    " +
"    }\r\n\r\n        function isSearchDialogHidden() {\r\n            return $(\'#searc" +
"h-dialog\').hasClass(\'hidden\');\r\n        }\r\n\r\n        function toggleSearchDialog" +
"() {\r\n            showSearchDialog(isSearchDialogHidden());\r\n        }\r\n\r\n      " +
"  function showSearchDialog(visible) {\r\n        }\r\n\r\n        function setStartin" +
"gSearchFilter(filter) {\r\n        }\r\n\r\n        function scrollToTop() {\r\n        " +
"}\r\n\r\n        function scrollToBottom() {\r\n        }\r\n\r\n        function toggleSh" +
"oppingMode() {\r\n            vm.ShoppingModeActive = !vm.ShoppingModeActive;\r\n   " +
"         editor.setEditable(!vm.ShoppingModeActive);\r\n        }\r\n\r\n        funct" +
"ion vueLoaded() {\r\n            var editorElement = document.getElementById(\'myed" +
"itor\');\r\n            editor = ProseMirrorBundle.initializeEditor(editorElement);" +
"\r\n            editor.commands.setContent(\'");


#line 178 "NoteRazorView.cshtml"
                                          WriteLiteral(Model.GetUnlockedHtmlContentAsJavaScriptString());

#line default
#line hidden
WriteLiteral(@"');

            editor.on('selectionUpdate', function (editor) {
                refreshActiveFormatState();
            });

            document.addEventListener('custom-link-clicked', function () {
                linkDialogShow();
            });
        }

");


#line 189 "NoteRazorView.cshtml"
        

#line default
#line hidden

#line 189 "NoteRazorView.cshtml"
          WriteLiteral(Model.VueDataBindingScript);

#line default
#line hidden
WriteLiteral("\r\n    </script>\r\n</head>\r\n<body>\r\n    <div");

WriteLiteral(" id=\"vueDataBinding\"");

WriteLiteral(">\r\n        <nav");

WriteLiteral(" id=\"navigation\"");

WriteLiteral(" class=\"d-flex\"");

WriteLiteral(">\r\n            <button");

WriteLiteral(" class=\"nav-item mr-auto\"");

WriteLiteral(" v-on:click=\"GoBackCommand\"");

WriteAttribute ("title", " title=\"", "\""

#line 195 "NoteRazorView.cshtml"
                                        , Tuple.Create<string,object,bool> ("", Model.Language["back"]

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 195 "NoteRazorView.cshtml"
                                                                                                          WriteLiteral(Model.Icon["arrow-left"]);

#line default
#line hidden
WriteLiteral("</button>\r\n            <span");

WriteLiteral(" id=\"quill-toolbar\"");

WriteLiteral(" hidden></span> <!--we need the initialized quill theme for editing hyperlinks-->" +
"\r\n\r\n");


#line 198 "NoteRazorView.cshtml"
            

#line default
#line hidden

#line 198 "NoteRazorView.cshtml"
             if (!Model.IsLocked)
            {   


#line default
#line hidden
WriteLiteral("                <button");

WriteLiteral(" class=\"nav-item\"");

WriteLiteral(" onclick=\"toggleFormat(\'bold\');\"");

WriteLiteral(" v-bind:class=\"{ active: BoldActive }\"");

WriteLiteral(" v-bind:disabled=\"ShoppingModeActive\"");

WriteAttribute ("title", " title=\"", "\""

#line 200 "NoteRazorView.cshtml"
                                                                                                                    , Tuple.Create<string,object,bool> ("", Model.Language["note_bold"]

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 200 "NoteRazorView.cshtml"
                                                                                                                                                                                           WriteLiteral(Model.Icon["format-bold"]);

#line default
#line hidden
WriteLiteral("</button>\r\n");

WriteLiteral("                <button");

WriteLiteral(" class=\"nav-item\"");

WriteLiteral(" onclick=\"toggleFormat(\'italic\');\"");

WriteLiteral(" v-bind:class=\"{ active: ItalicActive }\"");

WriteLiteral(" v-bind:disabled=\"ShoppingModeActive\"");

WriteAttribute ("title", " title=\"", "\""

#line 201 "NoteRazorView.cshtml"
                                                                                                                        , Tuple.Create<string,object,bool> ("", Model.Language["note_italic"]

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 201 "NoteRazorView.cshtml"
                                                                                                                                                                                                 WriteLiteral(Model.Icon["format-italic"]);

#line default
#line hidden
WriteLiteral("</button>\r\n");

WriteLiteral("                <span");

WriteLiteral(" class=\"show-only-on-wide-browser\"");

WriteLiteral(">\r\n                    <button");

WriteLiteral(" class=\"nav-item\"");

WriteLiteral(" onclick=\"toggleFormat(\'underline\');\"");

WriteLiteral(" v-bind:class=\"{ active: UnderlineActive }\"");

WriteLiteral(" v-bind:disabled=\"ShoppingModeActive\"");

WriteAttribute ("title", " title=\"", "\""

#line 203 "NoteRazorView.cshtml"
                                                                                                                                  , Tuple.Create<string,object,bool> ("", Model.Language["note_underline"]

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 203 "NoteRazorView.cshtml"
                                                                                                                                                                                                              WriteLiteral(Model.Icon["format-underline"]);

#line default
#line hidden
WriteLiteral("</button>\r\n                    <button");

WriteLiteral(" class=\"nav-item\"");

WriteLiteral(" onclick=\"toggleFormat(\'strike\');\"");

WriteLiteral(" v-bind:class=\"{ active: StrikeActive }\"");

WriteLiteral(" v-bind:disabled=\"ShoppingModeActive\"");

WriteAttribute ("title", " title=\"", "\""

#line 204 "NoteRazorView.cshtml"
                                                                                                                            , Tuple.Create<string,object,bool> ("", Model.Language["note_strike"]

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 204 "NoteRazorView.cshtml"
                                                                                                                                                                                                     WriteLiteral(Model.Icon["format-strikethrough"]);

#line default
#line hidden
WriteLiteral("</button>\r\n                    <button");

WriteLiteral(" class=\"nav-item\"");

WriteLiteral(" onclick=\"toggleFormat(\'ordered-list\');\"");

WriteLiteral(" v-bind:class=\"{ active: ListOrderedActive }\"");

WriteLiteral(" v-bind:disabled=\"ShoppingModeActive\"");

WriteAttribute ("title", " title=\"", "\""

#line 205 "NoteRazorView.cshtml"
                                                                                                                                       , Tuple.Create<string,object,bool> ("", Model.Language["note_list_ordered"]

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 205 "NoteRazorView.cshtml"
                                                                                                                                                                                                                      WriteLiteral(Model.Icon["format-list-numbers"]);

#line default
#line hidden
WriteLiteral("</button>\r\n                    <button");

WriteLiteral(" class=\"nav-item\"");

WriteLiteral(" onclick=\"toggleFormat(\'bullet-list\');\"");

WriteLiteral(" v-bind:class=\"{ active: ListBulletActive }\"");

WriteLiteral(" v-bind:disabled=\"ShoppingModeActive\"");

WriteAttribute ("title", " title=\"", "\""

#line 206 "NoteRazorView.cshtml"
                                                                                                                                     , Tuple.Create<string,object,bool> ("", Model.Language["note_list_unordered"]

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 206 "NoteRazorView.cshtml"
                                                                                                                                                                                                                      WriteLiteral(Model.Icon["format-list-bulleted"]);

#line default
#line hidden
WriteLiteral("</button>\r\n                </span>\r\n");

WriteLiteral("                <button");

WriteLiteral(" class=\"nav-item\"");

WriteLiteral(" onclick=\"toggleShoppingMode(); return false;\"");

WriteLiteral(" v-bind:class=\"{ active: ShoppingModeActive }\"");

WriteAttribute ("title", " title=\"", "\""

#line 208 "NoteRazorView.cshtml"
                                                                                                     , Tuple.Create<string,object,bool> ("", Model.Language["note_shopping_mode"]

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 208 "NoteRazorView.cshtml"
                                                                                                                                                                                     WriteLiteral(Model.Icon["keyboard_off_outline"]);

#line default
#line hidden
WriteLiteral("</button>\r\n");

WriteLiteral("                <button");

WriteLiteral(" class=\"nav-item\"");

WriteLiteral(" v-on:click=\"TogglePinnedCommand\"");

WriteLiteral(" v-bind:class=\"{ active: IsPinned }\"");

WriteLiteral(" v-bind:disabled=\"ShoppingModeActive\"");

WriteAttribute ("title", " title=\"", "\""

#line 209 "NoteRazorView.cshtml"
                                                                                                                   , Tuple.Create<string,object,bool> ("", Model.Language["note_pin"]

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 209 "NoteRazorView.cshtml"
                                                                                                                                                                                         WriteLiteral(Model.Icon["pin"]);

#line default
#line hidden
WriteLiteral("</button>\r\n");

WriteLiteral("                <button");

WriteLiteral(" class=\"nav-item\"");

WriteLiteral(" onclick=\"toggleSearchDialog(); return false;\"");

WriteAttribute ("title", " title=\"", "\""

#line 210 "NoteRazorView.cshtml"
                                                       , Tuple.Create<string,object,bool> ("", Model.Language["search"]

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 210 "NoteRazorView.cshtml"
                                                                                                                           WriteLiteral(Model.Icon["magnify"]);

#line default
#line hidden
WriteLiteral("</button>\r\n");


#line 211 "NoteRazorView.cshtml"



#line default
#line hidden
WriteLiteral("                <div");

WriteLiteral(" class=\"dropdown\"");

WriteLiteral(">\r\n                    <button");

WriteLiteral(" class=\"nav-item\"");

WriteLiteral(" id=\"navOverflowMenu\"");

WriteLiteral(" data-toggle=\"dropdown\"");

WriteLiteral(" aria-haspopup=\"true\"");

WriteLiteral(" aria-expanded=\"false\"");

WriteLiteral(" v-bind:disabled=\"ShoppingModeActive\"");

WriteLiteral(">\r\n");


#line 214 "NoteRazorView.cshtml"
                        

#line default
#line hidden

#line 214 "NoteRazorView.cshtml"
                          WriteLiteral(Model.Icon["dots-vertical"]);

#line default
#line hidden
WriteLiteral("\r\n                    </button>\r\n                    <div");

WriteLiteral(" class=\"dropdown-menu dropdown-menu-right\"");

WriteLiteral(" aria-labelledby=\"navOverflowMenu\"");

WriteLiteral(">\r\n                        <div");

WriteLiteral(" class=\"dropdown-item\"");

WriteLiteral(" data-toggle=\"modal\"");

WriteLiteral(" data-target=\"#colorPaletteModal\"");

WriteLiteral(">");


#line 217 "NoteRazorView.cshtml"
                                                                                                          WriteLiteral(Model.Icon["palette"]);

#line default
#line hidden
WriteLiteral(" ");


#line 217 "NoteRazorView.cshtml"
                                                                                                                                           Write(Model.Language["note_colors"]);


#line default
#line hidden
WriteLiteral("</div>\r\n                        <div");

WriteLiteral(" class=\"dropdown-divider\"");

WriteLiteral("></div>\r\n                        <div");

WriteLiteral(" class=\"dropdown-item\"");

WriteLiteral(" v-bind:class=\"{ active: Header1Active }\"");

WriteLiteral(" onclick=\"toggleFormat(\'header\', 1);\"");

WriteLiteral(">");


#line 219 "NoteRazorView.cshtml"
                                                                                                                                   WriteLiteral(Model.Icon["format-header-1"]);

#line default
#line hidden
WriteLiteral(" ");


#line 219 "NoteRazorView.cshtml"
                                                                                                                                                                            Write(Model.Language["note_header1"]);


#line default
#line hidden
WriteLiteral("</div>\r\n                        <div");

WriteLiteral(" class=\"dropdown-item\"");

WriteLiteral(" v-bind:class=\"{ active: Header2Active }\"");

WriteLiteral(" onclick=\"toggleFormat(\'header\', 2);\"");

WriteLiteral(">");


#line 220 "NoteRazorView.cshtml"
                                                                                                                                   WriteLiteral(Model.Icon["format-header-2"]);

#line default
#line hidden
WriteLiteral(" ");


#line 220 "NoteRazorView.cshtml"
                                                                                                                                                                            Write(Model.Language["note_header2"]);


#line default
#line hidden
WriteLiteral("</div>\r\n                        <div");

WriteLiteral(" class=\"dropdown-item\"");

WriteLiteral(" v-bind:class=\"{ active: Header3Active }\"");

WriteLiteral(" onclick=\"toggleFormat(\'header\', 3);\"");

WriteLiteral(">");


#line 221 "NoteRazorView.cshtml"
                                                                                                                                   WriteLiteral(Model.Icon["format-header-3"]);

#line default
#line hidden
WriteLiteral(" ");


#line 221 "NoteRazorView.cshtml"
                                                                                                                                                                            Write(Model.Language["note_header3"]);


#line default
#line hidden
WriteLiteral("</div>\r\n                        <div");

WriteLiteral(" class=\"dropdown-item show-only-on-narrow-browser\"");

WriteLiteral(" v-bind:class=\"{ active: UnderlineActive }\"");

WriteLiteral(" onclick=\"toggleFormat(\'underline\');\"");

WriteLiteral(">");


#line 222 "NoteRazorView.cshtml"
                                                                                                                                                                 WriteLiteral(Model.Icon["format-underline"]);

#line default
#line hidden
WriteLiteral(" ");


#line 222 "NoteRazorView.cshtml"
                                                                                                                                                                                                           Write(Model.Language["note_underline"]);


#line default
#line hidden
WriteLiteral("</div>\r\n                        <div");

WriteLiteral(" class=\"dropdown-item show-only-on-narrow-browser\"");

WriteLiteral(" v-bind:class=\"{ active: StrikeActive }\"");

WriteLiteral(" onclick=\"toggleFormat(\'strike\');\"");

WriteLiteral(">");


#line 223 "NoteRazorView.cshtml"
                                                                                                                                                           WriteLiteral(Model.Icon["format-strikethrough"]);

#line default
#line hidden
WriteLiteral(" ");


#line 223 "NoteRazorView.cshtml"
                                                                                                                                                                                                         Write(Model.Language["note_strike"]);


#line default
#line hidden
WriteLiteral("</div>\r\n                        <div");

WriteLiteral(" class=\"dropdown-item show-only-on-narrow-browser\"");

WriteLiteral(" v-bind:class=\"{ active: ListOrderedActive }\"");

WriteLiteral(" onclick=\"toggleFormat(\'ordered-list\');\"");

WriteLiteral(">");


#line 224 "NoteRazorView.cshtml"
                                                                                                                                                                      WriteLiteral(Model.Icon["format-list-numbers"]);

#line default
#line hidden
WriteLiteral(" ");


#line 224 "NoteRazorView.cshtml"
                                                                                                                                                                                                                   Write(Model.Language["note_list_ordered"]);


#line default
#line hidden
WriteLiteral("</div>\r\n                        <div");

WriteLiteral(" class=\"dropdown-item show-only-on-narrow-browser\"");

WriteLiteral(" v-bind:class=\"{ active: ListBulletActive }\"");

WriteLiteral(" onclick=\"toggleFormat(\'bullet-list\');\"");

WriteLiteral(">");


#line 225 "NoteRazorView.cshtml"
                                                                                                                                                                    WriteLiteral(Model.Icon["format-list-bulleted"]);

#line default
#line hidden
WriteLiteral(" ");


#line 225 "NoteRazorView.cshtml"
                                                                                                                                                                                                                  Write(Model.Language["note_list_unordered"]);


#line default
#line hidden
WriteLiteral("</div>\r\n                        <div");

WriteLiteral(" class=\"dropdown-item\"");

WriteLiteral(" v-bind:class=\"{ active: CodeActive }\"");

WriteLiteral(" onclick=\"toggleFormat(\'code-block\');\"");

WriteLiteral(">");


#line 226 "NoteRazorView.cshtml"
                                                                                                                                 WriteLiteral(Model.Icon["code-braces"]);

#line default
#line hidden
WriteLiteral(" ");


#line 226 "NoteRazorView.cshtml"
                                                                                                                                                                      Write(Model.Language["note_code"]);


#line default
#line hidden
WriteLiteral("</div>\r\n                        <div");

WriteLiteral(" class=\"dropdown-item\"");

WriteLiteral(" v-bind:class=\"{ active: QuoteActive }\"");

WriteLiteral(" onclick=\"toggleFormat(\'blockquote\');\"");

WriteLiteral(">");


#line 227 "NoteRazorView.cshtml"
                                                                                                                                  WriteLiteral(Model.Icon["format-quote-close"]);

#line default
#line hidden
WriteLiteral(" ");


#line 227 "NoteRazorView.cshtml"
                                                                                                                                                                              Write(Model.Language["note_quotation"]);


#line default
#line hidden
WriteLiteral("</div>\r\n                        <div");

WriteLiteral(" class=\"dropdown-item\"");

WriteLiteral(" onclick=\"linkDialogShow();\"");

WriteLiteral(">");


#line 228 "NoteRazorView.cshtml"
                                                                                 WriteLiteral(Model.Icon["link-variant"]);

#line default
#line hidden
WriteLiteral(" ");


#line 228 "NoteRazorView.cshtml"
                                                                                                                       Write(Model.Language["note_link"]);


#line default
#line hidden
WriteLiteral("</div>\r\n");


#line 229 "NoteRazorView.cshtml"
                        

#line default
#line hidden

#line 229 "NoteRazorView.cshtml"
                         if (Model.ShowManualSynchronization)
                        {


#line default
#line hidden
WriteLiteral("                            <div");

WriteLiteral(" class=\"dropdown-divider\"");

WriteLiteral("></div>\r\n");

WriteLiteral("                            <div");

WriteLiteral(" class=\"dropdown-item\"");

WriteLiteral(" v-on:click=\"PushNoteToOnlineStorageCommand\"");

WriteLiteral(">");


#line 232 "NoteRazorView.cshtml"
                                                                                                     WriteLiteral(Model.Icon["cloud-upload"]);

#line default
#line hidden
WriteLiteral(" ");


#line 232 "NoteRazorView.cshtml"
                                                                                                                                           Write(Model.Language["note_push_to_server"]);


#line default
#line hidden
WriteLiteral("</div>\r\n");

WriteLiteral("                            <div");

WriteLiteral(" class=\"dropdown-item\"");

WriteLiteral(" v-on:click=\"PullNoteFromOnlineStorageCommand\"");

WriteLiteral(">");


#line 233 "NoteRazorView.cshtml"
                                                                                                       WriteLiteral(Model.Icon["cloud-download"]);

#line default
#line hidden
WriteLiteral(" ");


#line 233 "NoteRazorView.cshtml"
                                                                                                                                               Write(Model.Language["note_pull_from_server"]);


#line default
#line hidden
WriteLiteral("</div>\r\n");


#line 234 "NoteRazorView.cshtml"
                        }


#line default
#line hidden
WriteLiteral("                    </div>\r\n                </div>\r\n");


#line 237 "NoteRazorView.cshtml"
            }


#line default
#line hidden
WriteLiteral("        </nav>\r\n\r\n        <div");

WriteLiteral(" id=\"content\"");

WriteLiteral(" v-bind:class=\"{ dark: IsDark }\"");

WriteLiteral(" v-bind:style=\"{ backgroundColor: BackgroundColorHex }\"");

WriteLiteral(">\r\n");


#line 241 "NoteRazorView.cshtml"
            

#line default
#line hidden

#line 241 "NoteRazorView.cshtml"
             if (Model.IsLocked)
            {


#line default
#line hidden
WriteLiteral("                <span");

WriteLiteral(" class=\"locked d-flex justify-content-center align-items-center\"");

WriteLiteral(" v-bind:class=\"{ dark: IsDark }\"");

WriteLiteral("><svg");

WriteLiteral(" width=\'128\'");

WriteLiteral(" height=\'128\'");

WriteLiteral(" viewBox=\'0 0 24 24\'");

WriteLiteral("><use");

WriteLiteral(" xlink:href=\"#svg-lock-outline\"");

WriteLiteral(" /></svg></span>\r\n");


#line 244 "NoteRazorView.cshtml"
            }
            else
            {


#line default
#line hidden
WriteLiteral("                <div");

WriteLiteral(" id=\"myeditor\"");

WriteAttribute ("class", " class=\"", "\""
, Tuple.Create<string,object,bool> ("", "note-viewer", true)
, Tuple.Create<string,object,bool> (" ", "detail-view", true)

#line 247 "NoteRazorView.cshtml"
                          , Tuple.Create<string,object,bool> (" ", Model.CssClassNoteType

#line default
#line hidden
, false)
);
WriteLiteral("></div>\r\n");


#line 248 "NoteRazorView.cshtml"
            }


#line default
#line hidden
WriteLiteral("        </div>\r\n\r\n        <div");

WriteLiteral(" id=\"tag-container\"");

WriteLiteral(" v-bind:class=\"{ dark: IsDark }\"");

WriteLiteral(">\r\n            <div");

WriteLiteral(" class=\"tag-input-group\"");

WriteLiteral(">\r\n                <div");

WriteLiteral(" class=\"input-group\"");

WriteLiteral(">\r\n                    <input");

WriteLiteral(" id=\"tags\"");

WriteLiteral(" class=\"form-control\"");

WriteLiteral(" v-bind:disabled=\"ShoppingModeActive\"");

WriteAttribute ("placeholder", " placeholder=\'", "\'"

#line 254 "NoteRazorView.cshtml"
                                                                     , Tuple.Create<string,object,bool> ("", Model.Language["tag_add"]

#line default
#line hidden
, false)
);
WriteLiteral(" type=\"text\"");

WriteLiteral(">\r\n                    <div");

WriteLiteral(" class=\"input-group-append\"");

WriteLiteral(">\r\n                        <div");

WriteLiteral(" id=\"add-tag\"");

WriteLiteral(" class=\"btn\"");

WriteLiteral(" onclick=\"addTag();\"");

WriteLiteral("><svg");

WriteLiteral(" width=\'16\'");

WriteLiteral(" height=\'16\'");

WriteLiteral(" viewBox=\'0 0 24 24\'");

WriteLiteral("><use");

WriteLiteral(" xlink:href=\"#svg-plus\"");

WriteLiteral(" /></svg></div>\r\n                    </div>\r\n                </div>\r\n            " +
"</div>\r\n            <ul");

WriteLiteral(" class=\"tag-list\"");

WriteLiteral(">\r\n                <li");

WriteLiteral(" class=\"tag-item\"");

WriteLiteral(" v-bind:style=\"{ backgroundColor: BackgroundColorHex }\"");

WriteLiteral(" v-for=\"Tag in Tags\"");

WriteLiteral(">\r\n                    {{Tag}}\r\n                    <div");

WriteLiteral(" class=\"tag-handle\"");

WriteLiteral(" onclick=\"deleteTag(event);\"");

WriteLiteral(" v-bind:data-tag=\"Tag\"");

WriteLiteral("><svg");

WriteLiteral(" width=\'16\'");

WriteLiteral(" height=\'16\'");

WriteLiteral(" viewBox=\'0 0 24 24\'");

WriteLiteral("><use");

WriteLiteral(" xlink:href=\"#svg-delete\"");

WriteLiteral(" /></svg></div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n\r\n    " +
"    <div");

WriteLiteral(" id=\"search-dialog\"");

WriteLiteral(" class=\"hidden\"");

WriteLiteral(">\r\n            <div");

WriteLiteral(" class=\"nav-filter\"");

WriteLiteral(">\r\n                <input");

WriteLiteral(" id=\"TxtFilter\"");

WriteLiteral(" autocomplete=\"off\"");

WriteLiteral(" />\r\n                <svg");

WriteLiteral(" id=\"filter-cancel-icon\"");

WriteLiteral(" width=\'24\'");

WriteLiteral(" height=\'24\'");

WriteLiteral(" viewBox=\'0 0 24 24\'");

WriteLiteral(" class=\"\"");

WriteLiteral(" onclick=\"showSearchDialog(false);\"");

WriteLiteral("><use");

WriteLiteral(" xlink:href=\"#svg-close-circle-outline\"");

WriteLiteral(" /></svg>\r\n            </div>\r\n        </div>\r\n\r\n        <div");

WriteLiteral(" class=\"modal\"");

WriteLiteral(" id=\"colorPaletteModal\"");

WriteLiteral(" tabindex=\"-1\"");

WriteLiteral(" role=\"dialog\"");

WriteLiteral(" aria-hidden=\"true\"");

WriteLiteral(">\r\n            <div");

WriteLiteral(" class=\"modal-dialog modal-sm\"");

WriteLiteral(" role=\"document\"");

WriteLiteral(">\r\n                <div");

WriteLiteral(" class=\"modal-content p-2\"");

WriteLiteral(">\r\n                    <button");

WriteLiteral(" type=\"button\"");

WriteLiteral(" class=\"close d-flex justify-content-end\"");

WriteLiteral(" data-dismiss=\"modal\"");

WriteLiteral(" aria-label=\"Close\"");

WriteLiteral(">\r\n                        <span");

WriteLiteral(" aria-hidden=\"true\"");

WriteLiteral(">&times;</span>\r\n                    </button>\r\n                    <div");

WriteLiteral(" class=\"d-flex flex-wrap\"");

WriteLiteral(">\r\n");


#line 282 "NoteRazorView.cshtml"
                        

#line default
#line hidden

#line 282 "NoteRazorView.cshtml"
                         foreach (var backgroundColor in @Model.BackgroundColorsHex)
                        {


#line default
#line hidden
WriteLiteral("                            <div");

WriteAttribute ("class", " class=\"", "\""
, Tuple.Create<string,object,bool> ("", "d-flex", true)
, Tuple.Create<string,object,bool> (" ", "align-items-center", true)
, Tuple.Create<string,object,bool> (" ", "justify-content-center", true)
, Tuple.Create<string,object,bool> (" ", "color-btn", true)

#line 284 "NoteRazorView.cshtml"
                                                           , Tuple.Create<string,object,bool> (" ", Model.GetDarkClass(backgroundColor)

#line default
#line hidden
, false)
);
WriteLiteral(" data-dismiss=\"modal\"");

WriteAttribute ("v-on:click", " v-on:click=\"", "\""
, Tuple.Create<string,object,bool> ("", "BackgroundColorHex=\'", true)

#line 284 "NoteRazorView.cshtml"
                                                                                                                                                        , Tuple.Create<string,object,bool> ("", backgroundColor

#line default
#line hidden
, false)
, Tuple.Create<string,object,bool> ("", "\'", true)
);
WriteAttribute ("style", " style=\"", "\""
, Tuple.Create<string,object,bool> ("", "background-color:", true)

#line 284 "NoteRazorView.cshtml"
                                                                                                                                                                                                    , Tuple.Create<string,object,bool> (" ", backgroundColor

#line default
#line hidden
, false)
);
WriteLiteral("><span>Lorem ipsum</span></div>\r\n");


#line 285 "NoteRazorView.cshtml"
                        }


#line default
#line hidden
WriteLiteral("                    </div>\r\n                </div>\r\n            </div>\r\n        <" +
"/div>\r\n\r\n        <div");

WriteLiteral(" class=\"modal\"");

WriteLiteral(" id=\"editLinkModal\"");

WriteLiteral(" tabindex=\"-1\"");

WriteLiteral(" role=\"dialog\"");

WriteLiteral(" aria-hidden=\"true\"");

WriteLiteral(">\r\n            <div");

WriteLiteral(" class=\"modal-dialog modal-sm\"");

WriteLiteral(" role=\"document\"");

WriteLiteral(">\r\n                <div");

WriteLiteral(" class=\"modal-content p-2\"");

WriteLiteral(">\r\n                    <div");

WriteLiteral(" class=\"modal-body\"");

WriteLiteral(">\r\n                        <div");

WriteLiteral(" class=\"input-group mb-3\"");

WriteLiteral(">\r\n                            <input");

WriteLiteral(" type=\"url\"");

WriteLiteral(" v-model=\"EditLinkUrl\"");

WriteLiteral(" class=\"form-control\"");

WriteLiteral(" v-focus>\r\n                            <button");

WriteLiteral(" type=\"button\"");

WriteLiteral(" class=\"btn btn-primary\"");

WriteLiteral(" onclick=\"linkDialogOpenPressed();\"");

WriteLiteral(">Open link</button>\r\n                        </div>\r\n                    </div>\r\n" +
"                    <div");

WriteLiteral(" class=\"modal-footer\"");

WriteLiteral(">\r\n                      <button");

WriteLiteral(" type=\"button\"");

WriteLiteral(" class=\"btn btn-secondary\"");

WriteLiteral(" data-dismiss=\"modal\"");

WriteLiteral(" onclick=\"linkDialogOkPressed();\"");

WriteLiteral(">");


#line 301 "NoteRazorView.cshtml"
                                                                                                                       Write(Model.Language["ok"]);


#line default
#line hidden
WriteLiteral("</button>\r\n                      <button");

WriteLiteral(" type=\"button\"");

WriteLiteral(" class=\"btn btn-secondary\"");

WriteLiteral(" data-dismiss=\"modal\"");

WriteLiteral(">");


#line 302 "NoteRazorView.cshtml"
                                                                                      Write(Model.Language["cancel"]);


#line default
#line hidden
WriteLiteral("</button>\r\n                      <button");

WriteLiteral(" type=\"button\"");

WriteLiteral(" class=\"btn btn-danger\"");

WriteLiteral(" data-dismiss=\"modal\"");

WriteLiteral(" onclick=\"linkDialogRemovePressed();\"");

WriteLiteral("><svg");

WriteLiteral(" width=\'16\'");

WriteLiteral(" height=\'16\'");

WriteLiteral(" viewBox=\'0 0 24 24\'");

WriteLiteral("><use");

WriteLiteral(" xlink:href=\"#svg-delete\"");

WriteLiteral(" /></svg></button>\r\n                    </div>\r\n                </div>\r\n         " +
"   </div>\r\n        </div>\r\n\r\n        <div hidden>\r\n");


#line 310 "NoteRazorView.cshtml"
            

#line default
#line hidden

#line 310 "NoteRazorView.cshtml"
              WriteLiteral(Model.Icon.LoadIcon("lock-outline", new[] { new KeyValuePair<string, string>("id", "svg-lock-outline") }));

#line default
#line hidden
WriteLiteral("\r\n");


#line 311 "NoteRazorView.cshtml"
            

#line default
#line hidden

#line 311 "NoteRazorView.cshtml"
              WriteLiteral(Model.Icon.LoadIcon("close-circle-outline", new[] { new KeyValuePair<string, string>("id", "svg-close-circle-outline") }));

#line default
#line hidden
WriteLiteral("\r\n");


#line 312 "NoteRazorView.cshtml"
            

#line default
#line hidden

#line 312 "NoteRazorView.cshtml"
              WriteLiteral(Model.Icon.LoadIcon("plus", new[] { new KeyValuePair<string, string>("id", "svg-plus") }));

#line default
#line hidden
WriteLiteral("\r\n");


#line 313 "NoteRazorView.cshtml"
            

#line default
#line hidden

#line 313 "NoteRazorView.cshtml"
              WriteLiteral(Model.Icon.LoadIcon("delete", new[] { new KeyValuePair<string, string>("id", "svg-delete") }));

#line default
#line hidden
WriteLiteral("\r\n        </div>\r\n    </div>\r\n</body>\r\n</html>");

}
}

// NOTE: this is the default generated helper class. You may choose to extract it to a separate file 
// in order to customize it or share it between multiple templates, and specify the template's base 
// class via the @inherits directive.
public abstract class NoteRazorViewBase
{

		// This field is OPTIONAL, but used by the default implementation of Generate, Write, WriteAttribute and WriteLiteral
		//
		System.IO.TextWriter __razor_writer;

		// This method is OPTIONAL
		//
		/// <summary>Executes the template and returns the output as a string.</summary>
		/// <returns>The template output.</returns>
		public string GenerateString ()
		{
			using (var sw = new System.IO.StringWriter ()) {
				Generate (sw);
				return sw.ToString ();
			}
		}

		// This method is OPTIONAL, you may choose to implement Write and WriteLiteral without use of __razor_writer
		// and provide another means of invoking Execute.
		//
		/// <summary>Executes the template, writing to the provided text writer.</summary>
		/// <param name="writer">The TextWriter to which to write the template output.</param>
		public void Generate (System.IO.TextWriter writer)
		{
			__razor_writer = writer;
			Execute ();
			__razor_writer = null;
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the template output without HTML escaping it.</summary>
		/// <param name="value">The literal value.</param>
		protected void WriteLiteral (string value)
		{
			__razor_writer.Write (value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the TextWriter without HTML escaping it.</summary>
		/// <param name="writer">The TextWriter to which to write the literal.</param>
		/// <param name="value">The literal value.</param>
		protected static void WriteLiteralTo (System.IO.TextWriter writer, string value)
		{
			writer.Write (value);
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a value to the template output, HTML escaping it if necessary.</summary>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected void Write (object value)
		{
			WriteTo (__razor_writer, value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes an object value to the TextWriter, HTML escaping it if necessary.</summary>
		/// <param name="writer">The TextWriter to which to write the value.</param>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected static void WriteTo (System.IO.TextWriter writer, object value)
		{
			if (value == null)
				return;

			var write = value as Action<System.IO.TextWriter>;
			if (write != null) {
				write (writer);
				return;
			}

			//NOTE: a more sophisticated implementation would write safe and pre-escaped values directly to the
			//instead of double-escaping. See System.Web.IHtmlString in ASP.NET 4.0 for an example of this.
			writer.Write(System.Net.WebUtility.HtmlEncode (value.ToString ()));
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to the template output.
		/// </summary>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		protected void WriteAttribute (string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			WriteAttributeTo (__razor_writer, name, prefix, suffix, values);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to a TextWriter.
		/// </summary>
		/// <param name="writer">The TextWriter to which to write the attribute.</param>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		///<remarks>Used by Razor helpers to write attributes.</remarks>
		protected static void WriteAttributeTo (System.IO.TextWriter writer, string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			// this is based on System.Web.WebPages.WebPageExecutingBase
			// Copyright (c) Microsoft Open Technologies, Inc.
			// Licensed under the Apache License, Version 2.0
			if (values.Length == 0) {
				// Explicitly empty attribute, so write the prefix and suffix
				writer.Write (prefix);
				writer.Write (suffix);
				return;
			}

			bool first = true;
			bool wroteSomething = false;

			for (int i = 0; i < values.Length; i++) {
				Tuple<string,object,bool> attrVal = values [i];
				string attPrefix = attrVal.Item1;
				object value = attrVal.Item2;
				bool isLiteral = attrVal.Item3;

				if (value == null) {
					// Nothing to write
					continue;
				}

				// The special cases here are that the value we're writing might already be a string, or that the
				// value might be a bool. If the value is the bool 'true' we want to write the attribute name instead
				// of the string 'true'. If the value is the bool 'false' we don't want to write anything.
				//
				// Otherwise the value is another object (perhaps an IHtmlString), and we'll ask it to format itself.
				string stringValue;
				bool? boolValue = value as bool?;
				if (boolValue == true) {
					stringValue = name;
				} else if (boolValue == false) {
					continue;
				} else {
					stringValue = value as string;
				}

				if (first) {
					writer.Write (prefix);
					first = false;
				} else {
					writer.Write (attPrefix);
				}

				if (isLiteral) {
					writer.Write (stringValue ?? value);
				} else {
					WriteTo (writer, stringValue ?? value);
				}
				wroteSomething = true;
			}
			if (wroteSomething) {
				writer.Write (suffix);
			}
		}
		// This method is REQUIRED. The generated Razor subclass will override it with the generated code.
		//
		///<summary>Executes the template, writing output to the Write and WriteLiteral methods.</summary>.
		///<remarks>Not intended to be called directly. Call the Generate method instead.</remarks>
		public abstract void Execute ();

}
}
#pragma warning restore 1591
